<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EmberJS.CN Blog</title>
  <subtitle>Ember JS相关新闻与资源</subtitle>
  <id>http://emberjs.cn/blog</id>
  <link href="http://emberjs.cn/blog"/>
  <link href="http://emberjs.cn/blog/feed.xml" rel="self"/>
  <updated>2014-03-30T00:00:00Z</updated>
  <author>
    <name>EmberJS.CN</name>
  </author>
  <entry>
    <title>Ember 1.5.0 and 1.6 Beta Released</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2014/03/30/ember-1-5-0-and-ember-1-6-beta-released.html"/>
    <id>http://emberjs.cn/blog/2014/03/30/ember-1-5-0-and-ember-1-6-beta-released.html</id>
    <published>2014-03-30T00:00:00Z</published>
    <updated>2014-03-30T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.5.0 and the first beta in the 1.6 series
have just been released. This comes as the fifth cycle of our six-week release
process that began just after 1.0 was released.&lt;/p&gt;
&lt;h3 class="anchorable-toc" id="toc_new-features-in-1-5"&gt;New features in 1.5&lt;/h3&gt;&lt;h4 class="anchorable-toc" id="toc_handlebars-logging-of-primitive-values"&gt;Handlebars Logging...&lt;/h4&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.5.0 and the first beta in the 1.6 series
have just been released. This comes as the fifth cycle of our six-week release
process that began just after 1.0 was released.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_new-features-in-1-5'&gt;New features in 1.5&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_handlebars-logging-of-primitive-values'&gt;Handlebars Logging of Primitive Values&lt;/h4&gt;
&lt;p&gt;This feature allows you to log primitive values (strings, numbers, etc) from within your
templates. Previously, the &lt;code&gt;{{log}}&lt;/code&gt; helper only allowed usage of bound property lookup.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{{log &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;**LOOKEY HERE**&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_new-testing-helpers'&gt;New Testing Helpers&lt;/h4&gt;&lt;h5 class='anchorable-toc' id='toc_routing-helpers'&gt;Routing Helpers&lt;/h5&gt;
&lt;p&gt;A few new testing helpers have been added to make it easier to make assertions on the state
of routing in your application (for example to confirm clicking a given link results in a
redirect to a specific route).&lt;/p&gt;

&lt;p&gt;New routing test helpers: &lt;code&gt;currentRouteName&lt;/code&gt;, &lt;code&gt;currentPath&lt;/code&gt;, and &lt;code&gt;currentURL&lt;/code&gt;.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_trigger-event-helper'&gt;Trigger Event Helper&lt;/h5&gt;
&lt;p&gt;A new &lt;code&gt;triggerEvent&lt;/code&gt; helper has been created to allow triggering of arbitrary events on an element.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;triggerEvent(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;#some-element-id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;dblclick&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_ember-computed-readonly'&gt;Ember.computed.readOnly&lt;/h4&gt;
&lt;p&gt;Generally, when you use &lt;code&gt;Ember.computed.oneWay&lt;/code&gt; you would also need to call &lt;code&gt;readOnly&lt;/code&gt; to ensure no data
propagates back up.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;// prior to Ember.computed.readOnly you would have to do the following:&lt;/span&gt;
Ember.computed.oneWay(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;).readOnly()

&lt;span class="comment"&gt;// in 1.5 you can use the following for the same result:&lt;/span&gt;
Ember.computed.readOnly(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_ember-isblank'&gt;Ember.isBlank&lt;/h4&gt;
&lt;p&gt;A new shortcut for checking if a particular object is empty or an empty string:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.isBlank();                &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="predefined-constant"&gt;null&lt;/span&gt;);            &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="predefined-constant"&gt;undefined&lt;/span&gt;);       &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);              &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank([]);              &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;\n&lt;/span&gt;&lt;span class="content"&gt;\t&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);          &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;  &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);            &lt;span class="comment"&gt;// true&lt;/span&gt;
Ember.isBlank({});              &lt;span class="comment"&gt;// false&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;\n&lt;/span&gt;&lt;span class="content"&gt;\t&lt;/span&gt;&lt;span class="content"&gt; Hello&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);    &lt;span class="comment"&gt;// false&lt;/span&gt;
Ember.isBlank(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;Hello world&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);   &lt;span class="comment"&gt;// false&lt;/span&gt;
Ember.isBlank([&lt;span class="integer"&gt;1&lt;/span&gt;,&lt;span class="integer"&gt;2&lt;/span&gt;,&lt;span class="integer"&gt;3&lt;/span&gt;]);         &lt;span class="comment"&gt;// false&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_eager-updating-url'&gt;Eager Updating URL&lt;/h4&gt;
&lt;p&gt;Previously, the URL in the address bar would only update at the very end of
the transition. This change causes the URL update to happen immediately unless
the transition was aborted/redirected within the same run loop, which provides
for a better UX 99% of the time.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_auto-location'&gt;Auto Location&lt;/h4&gt;
&lt;p&gt;Adds &lt;code&gt;auto&lt;/code&gt; as a &lt;code&gt;location&lt;/code&gt; option for the app&amp;#39;s &lt;code&gt;Router&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.reopen({
  &lt;span class="key"&gt;location&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;auto&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When used, Ember will select the best location option based off browser
support with the priority order: history, hash, none.&lt;/p&gt;

&lt;p&gt;Clean pushState paths accessed by hashchange-only browsers will be redirected
to the hash-equivalent and vice versa so future transitions look consistent.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_bound-action-lookup'&gt;Bound Action Lookup&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;{{action}}&lt;/code&gt; helper will now use a non-quoted parameter and perform a bound property
lookup against the action&amp;#39;s target at the time the event is triggered. This allows usage
of a dynamic action name (determined by looking up the property).&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_routes-inherit-model'&gt;Routes Inherit Model&lt;/h4&gt;
&lt;p&gt;Ember routes and leaf resources (without nested routes) will inherit the parent route&amp;#39;s model.&lt;/p&gt;

&lt;p&gt;Take the following example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.map(&lt;span class="keyword"&gt;function&lt;/span&gt;(){
  &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.route(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;edit&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  });
});

App.PostRoute = Ember.Route.extend({
  &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; {&lt;span class="key"&gt;title&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;ZOMG&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;text&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;AWESOME&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;};
  }
});

App.PostEditRoute = Ember.Route.extend({
  &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.modelFor(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;post&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now in 1.5, you do not have to define the &lt;code&gt;model&lt;/code&gt; hook for &lt;code&gt;PostEditRoute&lt;/code&gt; as the default implementation
is to use the parent routes model.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_other-notable-changes'&gt;Other Notable Changes&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_ever-present-_super-breaking-bugfix'&gt;Ever-present _super (Breaking Bugfix)&lt;/h4&gt;
&lt;p&gt;Prior versions of Ember.js used a super mechanism that was un-safe for mixins. If more than
one &lt;code&gt;_super&lt;/code&gt; was called for a given function name and there was no terminating function, an
infinite loop would occur. See &lt;a href="https://github.com/emberjs/ember.js/issues/3523"&gt;#3523&lt;/a&gt; for
further discussion.&lt;/p&gt;

&lt;p&gt;The solution released in 1.5 fixes this behavior (see &lt;a href="https://github.com/emberjs/ember.js/pull/3683"&gt;#3683&lt;/a&gt;),
but also breaks the edge-case of using &lt;code&gt;_super&lt;/code&gt; out of line. For instance:&lt;/p&gt;
&lt;div class="highlight JavaScript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="function"&gt;doIt&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    Ember.run.once(&lt;span class="local-variable"&gt;this&lt;/span&gt;, &lt;span class="local-variable"&gt;this&lt;/span&gt;._super);
  }
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Is no longer a supported use of &lt;code&gt;_super&lt;/code&gt;. See &lt;a href="http://emberjs.jsbin.com/xuroy/1/edit?html,js,output"&gt;this jsbin&lt;/a&gt;
for a live example. If this change impacts you, please comment on &lt;a href="https://github.com/emberjs/ember.js/pull/4301"&gt;#4632&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_handlebars-each-helper-checks-markup'&gt;Handlebars {{each}} Helper Checks Markup&lt;/h4&gt;
&lt;p&gt;In some cases, the browser may add or fix tags, which change the parentage of metamorph tags. This problem happens frequently when the
developer doesn&amp;#39;t include the TBODY tag inside a table for example.  This prevents the framework from updating or cleaning the underlying DOM
elements.&lt;/p&gt;

&lt;p&gt;An assertion has been added in non-production builds that indicates that the metamorph start and end tags have different parents.
This is most commonly caused by using an &lt;code&gt;{{each}}&lt;/code&gt; inside of a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag without specifying a &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example demonstrating the assertion (&lt;a href="http://emberjs.jsbin.com/fotin/3/edit"&gt;JSBin here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And the resolution is to include a &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; (&lt;a href="http://emberjs.jsbin.com/fotin/2/edit"&gt;JSBin here&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
      &lt;span class="tag"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_other-improvements'&gt;Other Improvements&lt;/h3&gt;
&lt;p&gt;As usual, there are a ton of bug fixes and small improvements in this
release. You can see a list of all the changes in the CHANGELOG:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.5.0/CHANGELOG.md"&gt;Ember.js 1.5.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.6.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.6.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>The Road to Ember Data 1.0</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2014/03/18/the-road-to-ember-data-1-0.html"/>
    <id>http://emberjs.cn/blog/2014/03/18/the-road-to-ember-data-1-0.html</id>
    <published>2014-03-18T00:00:00Z</published>
    <updated>2014-03-18T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Ember Data 1.0 is coming soon. We have a few last features to land before we
can confidently make guarantees around not breaking the API. Specifically:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A guarantee that if one side of a two-way relationship changes, the other
side will remain...&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Ember Data 1.0 is coming soon. We have a few last features to land before we
can confidently make guarantees around not breaking the API. Specifically:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A guarantee that if one side of a two-way relationship changes, the other
side will remain in sync, even if it hasn&amp;#39;t loaded yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All relationships will become async, but DataBoundPromises will make them
work well in observers, computed properties and in templates.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just like how it took us a few attempts to get the router right—but now we&amp;#39;ve
got the best one in JavaScript—getting Ember Data right has taken longer than
we thought, but it&amp;#39;s here and it&amp;#39;s almost ready for a 1.0.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Ever since the 1.0 release, developers building apps on top of Ember.js have
appreciated the stability and forward-momentum that our commitment to &lt;a href="http://semver.org/"&gt;Semantic
Versioning&lt;/a&gt; allows.&lt;/p&gt;

&lt;p&gt;We frequently get asked, &amp;quot;Ember.js is great, but what about Ember Data?&amp;quot; Today,
we&amp;#39;d like to give you an update on where Ember Data is and where it&amp;#39;s headed
soon.&lt;/p&gt;

&lt;p&gt;First, the good news: there is only one major breaking change planned before
releasing Ember Data 1.0, and we are doing our best to minimize the impact that
that change will have on existing apps.&lt;/p&gt;

&lt;p&gt;Other than that, we anticipate that the current feature set and API will serve
as a stable base for the foreseeable future. In other words, we don&amp;#39;t
anticipate needing any more user-facing breaking changes in order to
accommodate future changes to the architecture.&lt;/p&gt;

&lt;p&gt;So why haven&amp;#39;t we released a 1.0 yet? There are two more features that we&amp;#39;re
working on: an improved relationship architecture, and more consistent API when
dealing with relationships.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_a-single-source-of-truth'&gt;A Single Source of Truth&lt;/h2&gt;
&lt;p&gt;Modeling relationships between records is easily the most difficult feature
we&amp;#39;ve added to Ember Data. Finding a common solution is complicated because of
how much JSON servers differ from one another. Things get even more interesting
when you introduce streaming changes over WebSockets.&lt;/p&gt;

&lt;p&gt;The naïve approach is to declare that the problem is too domain-specific and
that each developer should hand-roll relationships via a simplistic abstraction
(like sugar around computed properties).&lt;/p&gt;

&lt;p&gt;However, we have observed that everyone who tries to implement their own
domain-specific relationships quickly ends up with their own ad hoc
mini-framework. As we did with Ember, we wanted to look at the problems shared
across all of these applications, and tease out the core abstractions.&lt;/p&gt;

&lt;p&gt;We wanted to build something that was powerful, to help save time for advanced
developers, while also being accessible to developers just getting started with
client-side web applications.&lt;/p&gt;

&lt;p&gt;To take a simple example, sometimes a has-many relationship is stored in the
parent record&amp;#39;s JSON representation:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;,
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Lord Grantham&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;children&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [&lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="integer"&gt;3&lt;/span&gt;, &lt;span class="integer"&gt;4&lt;/span&gt;]
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Other times, the same relationship may be saved as a foreign key on the children:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;{
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;,
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;Lady Mary&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;parent_id&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;
}
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Often, the same application will represent the same relationship in both forms,
depending on whether the records are being loaded or saved.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll spare you the details, but the permutations get even more complex when you
introduce things like streaming changes from the server over a socket.&lt;/p&gt;

&lt;p&gt;The point of highlighting the essential complexity here is to demonstrate that
we couldn&amp;#39;t just hardcode support for each one; each representation will likely
co-exist and interoperate with multiple other representations.&lt;/p&gt;

&lt;p&gt;One-way relationships aren&amp;#39;t too bad--you can get pretty far with hand-rolled
solutions before inevitably hitting a wall. The real problem comes up when you
have two-way relationships: an article has many comments, but each comment also
belongs to the article.&lt;/p&gt;

&lt;p&gt;Because both sides of the relationship aren&amp;#39;t always loaded together, and
because each side may represent the relationship differently (a foreign key on
the comment and an array on the article), maintaining this link has
historically been very difficult for us.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s especially complicated when you want to support updated data coming in
from the server. Imagine that refreshing the article provides a new set of
comments, but you also know that the user is in the middle of creating her own
comment. How do you make sure that the &lt;code&gt;comments&lt;/code&gt; array takes both of those
facts into consideration?&lt;/p&gt;

&lt;p&gt;At a high-level, the solution is this: instead of internally storing the
relationships as state on each record that needs to be synchronized, we
maintain a single entity in memory that represents the logical relationship
&lt;strong&gt;between&lt;/strong&gt; the records. That entity exists regardless of which side of the
relationship the application has loaded.&lt;/p&gt;

&lt;p&gt;For example, if you change the belongs-to relationship on a comment, you are
changing the has-many side even if the application has not yet loaded the
article. When the application finally does load the article, the local
belongs-to change is ready to apply.&lt;/p&gt;

&lt;p&gt;The long and short of it is that the two sides of a two-way relationship will
remain in sync in Ember Data 1.0, regardless of the order the records were
loaded, the way they were loaded, or how the relationships were represented in
the payloads.&lt;/p&gt;

&lt;p&gt;We are doing this work on the
&lt;a href="https://github.com/emberjs/data/tree/single-source-of-truth"&gt;single-source-of-truth&lt;/a&gt;
branch (thank you &lt;a href="https://github.com/igort"&gt;Igor Terzic&lt;/a&gt; for getting this over
the finish line!) and hope to merge it soon.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_async-relationships'&gt;Async Relationships&lt;/h2&gt;
&lt;p&gt;Currently in Ember Data, you must specify ahead of time whether relationships
are synchronous or asynchronous. Determining whether or not a relationship is
asynchronous requires knowing how the server will represent the data when
sending it to your application. That isn&amp;#39;t fatal, but it does tightly couple
the semantics of your application to the server.&lt;/p&gt;

&lt;p&gt;The fatal problem comes when you start refactoring your server API. For
example, in a has-many relationship, perhaps instead of inlining an array of
record IDs you instead send a URL where the client can retrieve the collection.&lt;/p&gt;

&lt;p&gt;All of a sudden, your application starts breaking in very Zalgo-esque ways (of
note: if you have not read Isaac&amp;#39;s &lt;a href="http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony"&gt;excellent essay on async
APIs&lt;/a&gt;,
please do).&lt;/p&gt;

&lt;p&gt;We strongly consider how easy or difficult refactorings are when designing
APIs, and in this case, we made a mistake. Making small changes to your server
API should not require widespread changes to the application that consumes it.&lt;/p&gt;

&lt;p&gt;For what it&amp;#39;s worth, not all refactorings are created equal. In this case, we
observed that real apps almost always shuffle around their payloads as they
grow, hitting this problem. (In other cases, if we see that real-world
applications rarely change in a particular way, we might prioritize convenience
over refactor-proofing.)&lt;/p&gt;

&lt;p&gt;The solution is to treat &lt;strong&gt;all&lt;/strong&gt; relationships as async, and use promises to
represent their values. By relying on Promises/A+&amp;#39;s guarantees around
asynchronicity, we can avoid releasing Zalgo into your application. In the
future, if the way you represent a relationship changes, or the order in which
the relationship becomes available changes, your application will continue to
function with no changes required.&lt;/p&gt;

&lt;p&gt;Using a Promise in JavaScript is pretty simple: call &lt;code&gt;.then&lt;/code&gt; on it and do
something with the returned value in the callback. But what if you want to use
an Ember Data relationship in a template or in a computed property? How would
that work?&lt;/p&gt;

&lt;p&gt;Ember Data 1.0 introduces a subclass of Promise called &lt;code&gt;DataBoundPromise&lt;/code&gt;. This
object allows you to observe properties on the Promise, just as you would on a
normal object. When the promise resolves, those properties will be updated to
match the underlying object. If you &lt;code&gt;get&lt;/code&gt;a property from a &lt;code&gt;DataBoundPromise&lt;/code&gt;
when it is unresolved, it will return &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; article = comment.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;article&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);

&lt;span class="comment"&gt;// If the promise has not yet resolved&lt;/span&gt;
article.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;//=&amp;gt; undefined&lt;/span&gt;

&lt;span class="comment"&gt;// If the promise has resolved&lt;/span&gt;
article.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;title&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;); &lt;span class="comment"&gt;//=&amp;gt; &amp;quot;Ember Data Roadmap&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The basic idea is that when you&amp;#39;re working within the context of Ember data bindings (templates, computed properties, observers), you can use a relationship as if it were a synchronous value, and let the data binding system handle the promise. This means that in many cases, this change won&amp;#39;t affect your existing code, and will indeed improve your ability to work with asynchronous relationships in templates and computed properties (a major pain point today).&lt;/p&gt;

&lt;p&gt;You should &lt;strong&gt;not&lt;/strong&gt; rely on this behavior when you want to use the value in imperative JavaScript (outside of computed properties); in that case, always use the promise&amp;#39;s &lt;code&gt;then()&lt;/code&gt; method to ensure the the value is available, lest you unleash Zalgo into your own apps. Only &lt;code&gt;.get&lt;/code&gt; properties from a &lt;code&gt;DataBoundPromise&lt;/code&gt; if you&amp;#39;re relying on Ember&amp;#39;s data binding functionality to update the template or computed property when the promise finally does resolve.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Only use &lt;code&gt;get&lt;/code&gt; on &lt;code&gt;DataBoundPromises&lt;/code&gt; inside of observers or computed properties. Otherwise, always treat them as regular promises and use &lt;code&gt;.then&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_other-improvements'&gt;Other Improvements&lt;/h2&gt;
&lt;p&gt;There are a number of outstanding bugs we&amp;#39;d like to get fixed before we feel comfortable declaring 1.0. Some of them involve tightening up behavior that is currently undefined, and others are bugs we want to make sure applications don&amp;#39;t come to rely on.&lt;/p&gt;

&lt;p&gt;Most notably, the current &lt;code&gt;RESTAdapter&lt;/code&gt; calls the wrong &lt;code&gt;normalize&lt;/code&gt; hook for embedded or sideloaded data in &lt;code&gt;pushPayload&lt;/code&gt;. &lt;a href="https://github.com/emberjs/data/issues/1804"&gt;Fixing this&lt;/a&gt; is a high priority and blocks the 1.0 release.&lt;/p&gt;

&lt;p&gt;We are also committed to making sure that the documentation is up to the high quality standards people expect from Ember before we declare 1.0.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_what-s-next'&gt;What&amp;#39;s Next&lt;/h2&gt;
&lt;p&gt;We are committed to following &lt;a href="http://semver.org/"&gt;Semantic Versioning&lt;/a&gt;, and want to make sure we have a solid base we can build on for the next few years.&lt;/p&gt;

&lt;p&gt;We think the decision to iterate on Ember.js before locking down the API has given us a foundation that we can continue to iterate on for years, without breaking backwards compatibility. We want the same for Ember Data.&lt;/p&gt;

&lt;p&gt;Once the issues we&amp;#39;ve outlined above are complete, we&amp;#39;ll be releasing a 1.0 of Ember Data that will not see breaking changes for some time. We intend to keep the release of Ember.js and Ember Data in sync, so that the first version in the Ember Data 1.x series will be whatever the current version of Ember is at that time.&lt;/p&gt;

&lt;p&gt;For example, if Ember.js 1.7 is the current stable version at the time of Ember Data&amp;#39;s first stable release, it will be Ember Data 1.7.&lt;/p&gt;

&lt;p&gt;As with Ember.js, we intend Ember Data to follow the same &lt;a href="http://emberjs.com/blog/2013/09/06/new-ember-release-process.html"&gt;Chrome-inspired six-week release process&lt;/a&gt;. That release process has paid dividends in terms of predictability and momentum, and the feedback has been overwhelmingly positive. Importantly, having separate stable, beta and canary releases also allows us to clearly &lt;a href="http://emberjs.com/builds/#/beta"&gt;communicate which features are stable&lt;/a&gt; and ready for production, and which are still being worked on.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_a-framework-for-data'&gt;A Framework for Data&lt;/h2&gt;
&lt;p&gt;As we outlined in &lt;a href="http://www.youtube.com/watch?v=jScLjUlLTLI"&gt;our keynote last week at Fluent&lt;/a&gt;, we believe that frameworks exist to make doing the right thing feel better than doing the wrong thing. By codifying best practices in code, frameworks allow their communities to build further abstractions, creating a virtuous cycle that grows more and more powerful over time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We think of Ember Data as a framework for managing your models and relationships.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Relationships are difficult to get right, but by giving in to temptation and having everyone roll their own solutions, the community cannot build further abstractions on top of the concept of relationships.&lt;/p&gt;

&lt;p&gt;Earlier on, when we started with Ember Data, we tried to codify good practices, but didn&amp;#39;t provide a flexible enough primitive underneath as an escape valve. Because people are interacting with servers they don&amp;#39;t always control, we realized that having a good escape valve was more important in Ember Data than usual.&lt;/p&gt;

&lt;p&gt;In order to make sure that the community would still be able to build on top of the Ember Data abstraction, we tried our best to isolate the code that is different between applications to the Adapter. This means that if someone writes a plugin for Ember Data, they can assume that models and relationships will look the same in all apps that use it, even though application backends can vary considerably.&lt;/p&gt;

&lt;p&gt;In earlier versions of Ember Data, we were too religious about this separation, forcing every application to bear significant costs in the adapter layer. When we rebooted Ember Data six months ago, we took a hard look at striking a better balance between these competing concerns. Based on the feedback we&amp;#39;ve gotten since then, we believe that Ember Data is now a great fit for applications that have very unique backends, as well as applications that want direction on how to build a backend that &amp;quot;just works&amp;quot; with Ember Data.&lt;/p&gt;

&lt;p&gt;We are committed to getting things right before declaring 1.0. The router in Ember.js went through several similar iterations, which were painful at the time, but we believe the results speak for themselves. Adapting to real-world usage is an important part of our design process, and we will always prioritize thinking through problems carefully over rushing to ship.&lt;/p&gt;

&lt;p&gt;Given that, we hope that you will trust us when we say that Ember Data is on the cusp of the level of quality that we demand from the 1.0 versions of our open source projects. If you start building now, you&amp;#39;ll be very happy with the forward momentum that having a community with shared understanding will bring.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>EmberJS.CN一周岁</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2014/02/17/ember-js-cn-one-year-old.html"/>
    <id>http://emberjs.cn/blog/2014/02/17/ember-js-cn-one-year-old.html</id>
    <published>2014-02-17T00:00:00Z</published>
    <updated>2014-02-17T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;时间飞逝，日月如梭。从上线EmberJS.CN到今日，整整一周年过去了。一年里Ember社区改变了许多，特别是在Ember1.0正式版发布之后，更是发展迅速。不论是代码结构、新特性、运行的稳定性，还是文档、教程等等方面都有了很大的改进。时至今日，Ember.js已经发布了1.4.0版本，Ember Data也推出了1.0.0-beta.6版本，相信不久就会迎来ED的1.0正式版，届时肯定又会掀起整个社区的一次大骚动。&lt;/p&gt;

&lt;p&gt;在过去的一年里，Ember.js的里程碑：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2013-02-15 Ember...&lt;/li&gt;
&lt;/ul&gt;</summary>
    <content type="html">&lt;p&gt;时间飞逝，日月如梭。从上线EmberJS.CN到今日，整整一周年过去了。一年里Ember社区改变了许多，特别是在Ember1.0正式版发布之后，更是发展迅速。不论是代码结构、新特性、运行的稳定性，还是文档、教程等等方面都有了很大的改进。时至今日，Ember.js已经发布了1.4.0版本，Ember Data也推出了1.0.0-beta.6版本，相信不久就会迎来ED的1.0正式版，届时肯定又会掀起整个社区的一次大骚动。&lt;/p&gt;

&lt;p&gt;在过去的一年里，Ember.js的里程碑：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2013-02-15 Ember.js发布1.0.0.rc.1&lt;/li&gt;
&lt;li&gt;2013-08-31 Ember.js发布1.0.0正式版&lt;/li&gt;
&lt;li&gt;2013-09-04 Ember Data发布1.0.0-beta.2&lt;/li&gt;
&lt;li&gt;2013-09-06 制定了Ember 1.0后发布策略&lt;/li&gt;
&lt;li&gt;2013-12-17 定义了2014年的开发计划 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;伴随着Ember.js的成长，EmberJS.CN也不断的在长大，不断的为我们中文社区的Ember开发作着贡献。下面简单的回顾一下这一年中EmberJS.CN都做了些什么。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2013-02-18 EmberJS.CN诞生&lt;/li&gt;
&lt;li&gt;2013-03-06 EmberJS.CN&lt;a href="http://weibo.com/embercn"&gt;开博&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2013-03-11 创建第一个QQ群（298026365）&lt;/li&gt;
&lt;li&gt;2013-04-06 &lt;a href="http://discuss.emberjs.cn"&gt;EmberJS.CN中文论坛&lt;/a&gt;上线&lt;/li&gt;
&lt;li&gt;2013-07-23 EmberJS.CN第一个开源项目&lt;a href="https://github.com/emberjs-cn/intimi"&gt;Intimi&lt;/a&gt;启动&lt;/li&gt;
&lt;li&gt;2013-09-10 Intimi 0.1.0发布&lt;/li&gt;
&lt;li&gt;2013-11-19 Intimi 0.2.0发布&lt;/li&gt;
&lt;li&gt;2013-12-15 完成与官方指南的同步&lt;a href="http://emberjs.cn/guides"&gt;翻译&lt;/a&gt;工作，并持续保持更新&lt;/li&gt;
&lt;li&gt;2014-02-15 EmberJS.CN第二个开源项目&lt;a href="https://github.com/emberjs-cn/ember-menglifang"&gt;Ember Menglifang&lt;/a&gt; 0.2.3发布&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在已经走在了2014年的日子里，EmberJS.CN将在未来的一年里持续的为大家服务，为Ember.JS在中文开发社区的推广努力。在这里也特别感谢一年以来大家对本网站的包容、谅解与支持。&lt;/p&gt;

&lt;p&gt;谢谢大家！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember 1.4.0和1.5 Beta发布</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2014/02/12/ember-1-4-0-and-ember-1-5-0-beta-released.html"/>
    <id>http://emberjs.cn/blog/2014/02/12/ember-1-4-0-and-ember-1-5-0-beta-released.html</id>
    <published>2014-02-12T00:00:00Z</published>
    <updated>2014-02-12T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;h3 class="anchorable-toc" id="toc_1-4"&gt;1.4中的新特性&lt;/h3&gt;&lt;h4 class="anchorable-toc" id="toc_"&gt;属性大括号扩展&lt;/h4&gt;
&lt;p&gt;在之前的Ember版本中，如果需要观察&lt;code&gt;baz&lt;/code&gt;的&lt;code&gt;foo&lt;/code&gt;和&lt;code&gt;bar&lt;/code&gt;属性，需要在同时设置&lt;code&gt;baz.foo&lt;/code&gt;和&lt;code&gt;baz.bar&lt;/code&gt;两个依赖键。&lt;/p&gt;
&lt;div class="highlight javascript "&gt;
&lt;div class="ribbon"&gt;&lt;/div&gt;
&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; obj = Ember.Object.extend({
  &lt;span class="key"&gt;baz&lt;/span&gt;: {&lt;span class="key"&gt;foo&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;BLAMMO&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;bar&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;BLAZORZ&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;},

  &lt;span class="function"&gt;something&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;baz.foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;baz...&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;</summary>
    <content type="html">&lt;h3 class='anchorable-toc' id='toc_1-4'&gt;1.4中的新特性&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_'&gt;属性大括号扩展&lt;/h4&gt;
&lt;p&gt;在之前的Ember版本中，如果需要观察&lt;code&gt;baz&lt;/code&gt;的&lt;code&gt;foo&lt;/code&gt;和&lt;code&gt;bar&lt;/code&gt;属性，需要在同时设置&lt;code&gt;baz.foo&lt;/code&gt;和&lt;code&gt;baz.bar&lt;/code&gt;两个依赖键。&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; obj = Ember.Object.extend({
  &lt;span class="key"&gt;baz&lt;/span&gt;: {&lt;span class="key"&gt;foo&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;BLAMMO&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;bar&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;BLAZORZ&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;},

  &lt;span class="function"&gt;something&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;baz.foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;baz.bar&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;baz.foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;baz.bar&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用最新的属性大括号扩展，可以这样来简化依赖设置：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="function"&gt;something&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(){
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;baz.foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;) + &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt; &lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; + &lt;span class="local-variable"&gt;this&lt;/span&gt;.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;baz.bar&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
  }.property(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;baz.{foo,bar}&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样大大的简化了重复和冗余的相似依赖键的设置。&lt;/p&gt;

&lt;p&gt;详细的内容可以查看&lt;a href="https://github.com/emberjs/ember.js/pull/3538"&gt;PR #3538&lt;/a&gt;&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_ember-run-bind'&gt;Ember.run.bind&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Ember.run.bind&lt;/code&gt;是一个非常有用的工具，可以用来集成提供异步回调的非Ember库。&lt;/p&gt;

&lt;p&gt;Ember使用运行循环来批处理和合并更新。这是通过标记Ember相关代码的开始和结束执行来实现的。&lt;/p&gt;

&lt;p&gt;当使用事件时，如视图点击处理器，Ember把该处理器包裹在一个运行循环中。如果与非Ember库集成，那么就会变得非常让人厌烦。&lt;/p&gt;

&lt;p&gt;例如，下面的代码就非常的啰嗦，不过确实正确的处理第三方库事件的Ember代码：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; that = &lt;span class="local-variable"&gt;this&lt;/span&gt;;
jQuery(window).on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;resize&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;(){
  Ember.run(&lt;span class="keyword"&gt;function&lt;/span&gt;(){
    that.handleResize();
  });
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;为了减少这种套式代码，下面的代码可以完成将回调包裹到一个运行循环中。&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;jQuery(window).on(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;resize&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, Ember.run.bind(&lt;span class="local-variable"&gt;this&lt;/span&gt;, &lt;span class="local-variable"&gt;this&lt;/span&gt;.handleResize));
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;更多的关于运行循环的内容，请查看&lt;a href="/guides/understanding-ember/run-loop/"&gt;运行循环指南&lt;/a&gt;。（非常感谢&lt;a href="https://github.com/bfbriggs"&gt;Brendan Briggs&lt;/a&gt;）。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_code-with-code'&gt;支持控制器的&lt;code&gt;{{with}}&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;{{with}}&lt;/code&gt;助手现在可以接收一个&lt;code&gt;controller&lt;/code&gt;选项。添加&lt;code&gt;controller=&amp;#39;something&amp;#39;&lt;/code&gt;表示&lt;code&gt;{{with}}&lt;/code&gt;助手将创建和使用一个指定的控制器来作为其内容的新上下文。&lt;/p&gt;

&lt;p&gt;这与&lt;code&gt;{{each}}&lt;/code&gt;助手中使用&lt;code&gt;itemController&lt;/code&gt;选项非常类似。&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt; &lt;span class="attribute-name"&gt;users.posts&lt;/span&gt; &lt;span class="attribute-name"&gt;controller&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;userBlogPosts&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="comment"&gt;{{!- The current context is wrapped in our controller instance }}&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;with&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在上例中，提供给&lt;code&gt;{{with}}&lt;/code&gt;块的模板被包裹到&lt;code&gt;userBlogPost&lt;/code&gt;控制器中，这提供了一个非常简单的方法，来讲当前上下文中添加自定义的函数和属性。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_'&gt;延迟绑定属性&lt;/h4&gt;
&lt;p&gt;之前，所有绑定的属性都有一定程度的开销（大部分是维护绑定和观察器之间的关联关系）。这导致需要限制自动绑定到&lt;code&gt;Ember.TextField&lt;/code&gt;，&lt;code&gt;Ember.TextArea&lt;/code&gt;等控件上的属性。对于越来越多的人希望绑定HTML5属性来说，这是一个问题的根源。为了多绑定属性，不得不重新打开&lt;code&gt;Ember.TextField&lt;/code&gt;类，然后添加可以绑定的属性。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.TextField.reopen({
  &lt;span class="key"&gt;attributeBindings&lt;/span&gt;: [&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;autofocus&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;]
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后在模板中就可以：&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;autofocus&lt;/span&gt;=&lt;span class="attribute-value"&gt;omgAutofocusMe&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这当然不理想，对于那些认为&lt;code&gt;Ember.TextField&lt;/code&gt;理所当然支持的人来说，会遇到非常多问题。&lt;/p&gt;

&lt;p&gt;随着Ember 1.4的发布，这个问题得到了很好的处理。在1.4中，任何属性绑定在试图被渲染的时候如果不存在，那么不会为他设置观察器（因此避免了原本的性能开销问题）。当试图在之后又设置了该属性的时候（在初次渲染之后），一个属性观察器会在这时被添加。&lt;/p&gt;

&lt;p&gt;这意味着只会为存在的谁能够添加观察器，这样就可以在&lt;code&gt;attributeBindings&lt;/code&gt;中添加所有有效的HTML属性，今后就可以直接使用，而不需要在重新打开类来添加。&lt;/p&gt;

&lt;p&gt;在Ember 1.4中&lt;code&gt;{{input type=&amp;quot;text&amp;quot;}}&lt;/code&gt;，&lt;code&gt;{{textarea}}&lt;/code&gt;和&lt;code&gt;{{checkbox}}&lt;/code&gt;助手可以使用任何HTML5的属性。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_'&gt;其他改进&lt;/h4&gt;
&lt;p&gt;一如既往，本次发布还修改了许多之前版本存在的Bugs，对一部分功能也作出了一些改进。详细的内容可以查看CHANGELOG：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.4.0/CHANGELOG.md"&gt;Ember.js 1.4.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.5.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.5.0-beta.1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>安全性发布 - Ember 1.2.2, and 1.3.2</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2014/02/07/ember-security-releases.html"/>
    <id>http://emberjs.cn/blog/2014/02/07/ember-security-releases.html</id>
    <published>2014-02-07T00:00:00Z</published>
    <updated>2014-02-07T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;因为开发者信任Ember.js在生产环境下来处理敏感的用户数据，因此Ember团队非常关注项目的安全问题。实际上，Ember是少数具有&lt;a href="http://emberjs.com/security/"&gt;清晰的安全策略&lt;/a&gt;和一个&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;为安全问题专设的邮件列表&lt;/a&gt;的Javascript项目之一。&lt;/p&gt;

&lt;p&gt;今天Ember.js发布了1.2.2，1.3.2和1.4.0-beta.6，其中包含了一个重要安全问题的修复：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.4.0-beta.6 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.4.0-beta.5...v1.4.0-beta.6"&gt;对比视图&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;1.3.2 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.3.1...v1.3.2"&gt;对比视图&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;1.2.2 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.2.1...v1.2.2"&gt;对比视图&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本次发布修复了一个XSS漏洞，在安全问题邮件列表中可以得到关于...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;因为开发者信任Ember.js在生产环境下来处理敏感的用户数据，因此Ember团队非常关注项目的安全问题。实际上，Ember是少数具有&lt;a href="http://emberjs.com/security/"&gt;清晰的安全策略&lt;/a&gt;和一个&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;为安全问题专设的邮件列表&lt;/a&gt;的Javascript项目之一。&lt;/p&gt;

&lt;p&gt;今天Ember.js发布了1.2.2，1.3.2和1.4.0-beta.6，其中包含了一个重要安全问题的修复：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.4.0-beta.6 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.4.0-beta.5...v1.4.0-beta.6"&gt;对比视图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.3.2 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.3.1...v1.3.2"&gt;对比视图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.2.2 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.2.1...v1.2.2"&gt;对比视图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本次发布修复了一个XSS漏洞，在安全问题邮件列表中可以得到关于该漏洞的信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/ember-security/1h6FRgr8lXQ"&gt;CVE-2014-0046&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;推荐马上更新项目。为了方便升级，本次发布的版本主要只包含了安全修复（1.4.0-beta.6除外，该版本是一个常规的beta发布，并包含了此次的安全修复）。&lt;/p&gt;

&lt;p&gt;如果在生产环境下使用Ember.js，请考虑订阅&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;安全通知邮件列表&lt;/a&gt;。该邮件列表流量非常低，且只包含安全通知。&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_'&gt;更多内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2013/04/05/announcing-the-ember-security-policy.html"&gt;Ember.js安全策略公告&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/security/"&gt;Ember.js安全策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;Ember.js安全组&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>使用Ember.SimpleAuth实现用户登录逻辑</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2014/01/29/using-ember-simple-auth.html"/>
    <id>http://emberjs.cn/blog/2014/01/29/using-ember-simple-auth.html</id>
    <published>2014-01-29T00:00:00Z</published>
    <updated>2014-01-29T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;Ember.SimpleAuth是一个实现身份认证和授权的轻量级的Ember.js库。通过配置身份认证和授权策略可以实现任意形式的身份认证和授权机制。&lt;/p&gt;
&lt;h3 class="anchorable-toc" id="toc_ember-simpleauth"&gt;搭建Ember.SimpleAuth开发环境&lt;/h3&gt;
&lt;p&gt;安装RubyGems。&lt;/p&gt;
&lt;div class="highlight bash "&gt;
&lt;div class="ribbon"&gt;&lt;/div&gt;
&lt;div class="scroller"&gt;
&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  cd /path/to/ember-simple-auth
  bundle install
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 class="anchorable-toc" id="toc_"&gt;运行测试&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在命令行中运行测试&lt;/p&gt;
&lt;div class="highlight bash "&gt;
&lt;div class="ribbon"&gt;&lt;/div&gt;
&lt;div class="scroller"&gt;
&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rake test
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在浏览器中运行测试 &lt;/p&gt;
&lt;div class="highlight bash "&gt;
&lt;div class="ribbon"&gt;&lt;/div&gt;
&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rackup

# 然后访问：http...&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    <content type="html">&lt;p&gt;Ember.SimpleAuth是一个实现身份认证和授权的轻量级的Ember.js库。通过配置身份认证和授权策略可以实现任意形式的身份认证和授权机制。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_ember-simpleauth'&gt;搭建Ember.SimpleAuth开发环境&lt;/h3&gt;
&lt;p&gt;安装RubyGems。&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  cd /path/to/ember-simple-auth
  bundle install
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_'&gt;运行测试&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在命令行中运行测试&lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rake test
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在浏览器中运行测试 &lt;/p&gt;
&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;rackup

# 然后访问：http://localhost:9292
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 class='anchorable-toc' id='toc_'&gt;运行示例&lt;/h4&gt;&lt;div class="highlight bash "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;  cd examples
  bundle install

  ./runner

  # 然后访问：http://localhost:4567
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
</feed>
