<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EmberJS.CN Blog</title>
  <subtitle>Ember JS相关新闻与资源</subtitle>
  <id>http://emberjs.cn/blog</id>
  <link href="http://emberjs.cn/blog"/>
  <link href="http://emberjs.cn/blog/feed.xml" rel="self"/>
  <updated>2014-01-16T00:00:00Z</updated>
  <author>
    <name>EmberJS.CN</name>
  </author>
  <entry>
    <title>如何使用ember-dev来开发Ember包</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2014/01/16/how-to-use-ember-dev-to-develop-ember-packages.html"/>
    <id>http://emberjs.cn/blog/2014/01/16/how-to-use-ember-dev-to-develop-ember-packages.html</id>
    <published>2014-01-16T00:00:00Z</published>
    <updated>2014-01-16T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;h3 class='anchorable-toc' id='toc_ember-dev'&gt;Ember Dev是什么？&lt;/h3&gt;
&lt;p&gt;Ember Dev是由Ember核心团队开发的一个用来辅助开发Ember包的工具。目前还处于“社会主义初级阶段”，可谓是“万里长征”迈出了好几步。目前Ember Dev已经包含了一些基本的工具，可以帮助我们提高Ember包开发的速度。其为我们搭建了开发、测试、发布等基本操作环境。用官方的语言来表达一下Ember Dev现在的状态：&lt;/p&gt;

&lt;p&gt;“目前Ember Dev还不推荐公众使用，因为还缺少一些重要的特性，比如缺少生成器。”&lt;/p&gt;

&lt;p&gt;尽管如此，我们还是可以放心的使用Ember Dev来搭建Ember包项目的构建环境的。下面将一步步介绍如何使用Ember Dev来搭建一个Ember包的构建环境。&lt;/p&gt;
</summary>
    <content type="html">&lt;h3 class='anchorable-toc' id='toc_ember-dev'&gt;Ember Dev是什么？&lt;/h3&gt;
&lt;p&gt;Ember Dev是由Ember核心团队开发的一个用来辅助开发Ember包的工具。目前还处于“社会主义初级阶段”，可谓是“万里长征”迈出了好几步。目前Ember Dev已经包含了一些基本的工具，可以帮助我们提高Ember包开发的速度。其为我们搭建了开发、测试、发布等基本操作环境。用官方的语言来表达一下Ember Dev现在的状态：&lt;/p&gt;

&lt;p&gt;“目前Ember Dev还不推荐公众使用，因为还缺少一些重要的特性，比如缺少生成器。”&lt;/p&gt;

&lt;p&gt;尽管如此，我们还是可以放心的使用Ember Dev来搭建Ember包项目的构建环境的。下面将一步步介绍如何使用Ember Dev来搭建一个Ember包的构建环境。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;创建基本目录结构&lt;/h3&gt;</content>
  </entry>
  <entry>
    <title>安全性发布 - Ember 1.0.1, 1.1.3, 1.2.1, and 1.3.1</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2014/01/14/ember-security-releases.html"/>
    <id>http://emberjs.cn/blog/2014/01/14/ember-security-releases.html</id>
    <published>2014-01-14T00:00:00Z</published>
    <updated>2014-01-14T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;因为开发者信任Ember.js在生产环境下来处理敏感的用户数据，因此Ember团队非常关注项目的安全问题。实际上，Ember是少数具有&lt;a href="http://emberjs.com/security/"&gt;清晰的安全策略&lt;/a&gt;和一个&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;为安全问题专设的邮件列表&lt;/a&gt;的Javascript项目之一。&lt;/p&gt;

&lt;p&gt;今天发布的Ember.js
1.0.1，1.1.3，1.2.1，1.3.1和1.4.0-beta.2包含下面的重要的安全修复：&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;因为开发者信任Ember.js在生产环境下来处理敏感的用户数据，因此Ember团队非常关注项目的安全问题。实际上，Ember是少数具有&lt;a href="http://emberjs.com/security/"&gt;清晰的安全策略&lt;/a&gt;和一个&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;为安全问题专设的邮件列表&lt;/a&gt;的Javascript项目之一。&lt;/p&gt;

&lt;p&gt;今天发布的Ember.js
1.0.1，1.1.3，1.2.1，1.3.1和1.4.0-beta.2包含下面的重要的安全修复：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.4.0-beta.2 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.4.0-beta.1...v1.4.0-beta.2"&gt;对比视图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.3.1 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.3.0...v1.3.1"&gt;对比视图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.2.1 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.2.0...v1.2.1"&gt;对比视图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.1.3 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.1.2...v1.1.3"&gt;对比视图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.0.1 -- &lt;a href="https://github.com/emberjs/ember.js/compare/v1.0.0...v1.0.1"&gt;对比视图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本次修复包含两个潜在的XSS漏洞，可以通过下面两个链接获取更多信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/ember-security/2kpXXCxISS4"&gt;CVE-2014-0013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/ember-security/PSE4RzTi6l4"&gt;CVE-2014-0014&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;推荐马上更新项目。为了方便升级，本次发布的版本主要只包含了安全修复（1.4.0-beta.2除外，该版本是一个常规的beta发布，并包含了此次的安全修复）。&lt;/p&gt;

&lt;p&gt;如果在生产环境下使用Ember.js，请考虑订阅&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;安全通知邮件列表&lt;/a&gt;。该邮件列表流量非常低，且只包含安全通知。&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_'&gt;更多内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/blog/2013/04/05/announcing-the-ember-security-policy.html"&gt;Ember.js安全策略公告&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/security/"&gt;Ember.js安全策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/ember-security"&gt;Ember.js安全组&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember Data 1.0.0.beta.5发布</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2014/01/11/ember-data-1-0-0-beta-5.html"/>
    <id>http://emberjs.cn/blog/2014/01/11/ember-data-1-0-0-beta-5.html</id>
    <published>2014-01-11T00:00:00Z</published>
    <updated>2014-01-11T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;h3 class='anchorable-toc' id='toc_ember-data-changelog'&gt;Ember Data Changelog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果没有指定&lt;code&gt;factory&lt;/code&gt;，那么在&lt;code&gt;modelFor&lt;/code&gt;中实现键值标准化；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store.filter&lt;/code&gt;总是返回一个&lt;code&gt;FilteredRecordArray&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;带选项的属性支持&lt;code&gt;key&lt;/code&gt;选项；&lt;/li&gt;
&lt;li&gt;修正windows构建的问题；&lt;/li&gt;
&lt;li&gt;添加&lt;code&gt;DS.Errors&lt;/code&gt;对象；&lt;/li&gt;
&lt;li&gt;处理单个对象的&lt;code&gt;pushPayload&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;recordArrayManager&lt;/code&gt;中创建&lt;code&gt;RecordArrays&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;添加更多文档说明。&lt;/li&gt;
&lt;/ul&gt;
</summary>
    <content type="html">&lt;h3 class='anchorable-toc' id='toc_ember-data-changelog'&gt;Ember Data Changelog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果没有指定&lt;code&gt;factory&lt;/code&gt;，那么在&lt;code&gt;modelFor&lt;/code&gt;中实现键值标准化；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store.filter&lt;/code&gt;总是返回一个&lt;code&gt;FilteredRecordArray&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;带选项的属性支持&lt;code&gt;key&lt;/code&gt;选项；&lt;/li&gt;
&lt;li&gt;修正windows构建的问题；&lt;/li&gt;
&lt;li&gt;添加&lt;code&gt;DS.Errors&lt;/code&gt;对象；&lt;/li&gt;
&lt;li&gt;处理单个对象的&lt;code&gt;pushPayload&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;recordArrayManager&lt;/code&gt;中创建&lt;code&gt;RecordArrays&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;添加更多文档说明。&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Ember 1.3.0 and 1.4 Beta Released</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2014/01/06/ember-1-3-0-and-ember-1-4-0-beta-released.html"/>
    <id>http://emberjs.cn/blog/2014/01/06/ember-1-3-0-and-ember-1-4-0-beta-released.html</id>
    <published>2014-01-06T00:00:00Z</published>
    <updated>2014-01-06T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.3.0 and the first beta in the 1.4 series
have just been released. This comes as the third cycle of our six-week release
process that began just after 1.0 was released.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_new-in-1-3'&gt;New in 1.3&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_non-array-dependencies-for-reducecomputed'&gt;Non-array Dependencies for ReduceComputed&lt;/h4&gt;</summary>
    <content type="html">&lt;p&gt;We are pleased to announce that both Ember.js 1.3.0 and the first beta in the 1.4 series
have just been released. This comes as the third cycle of our six-week release
process that began just after 1.0 was released.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_new-in-1-3'&gt;New in 1.3&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_non-array-dependencies-for-reducecomputed'&gt;Non-array Dependencies for ReduceComputed&lt;/h4&gt;
&lt;p&gt;Generally, using &lt;code&gt;reduceComputed&lt;/code&gt; is all about efficiently computing the resulting value, but
occasionally you might need to recompute every time. It is now possible to instruct
&lt;code&gt;reduceComputed&lt;/code&gt; to completely recompute when an item is added/removed (instead of calling
the &lt;code&gt;addedItem&lt;/code&gt; and &lt;code&gt;removedItem&lt;/code&gt; callbacks).&lt;/p&gt;

&lt;p&gt;This is done by using either non-array dependent keys or adding &lt;code&gt;.[]&lt;/code&gt; to an array dependency.&lt;/p&gt;

&lt;p&gt;Take a look at the following example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.Object.extend({
  &lt;span class="comment"&gt;// When `string` is changed, `computed` is completely recomputed.&lt;/span&gt;
  &lt;span class="key"&gt;string&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;a string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,

  &lt;span class="comment"&gt;// When an item is added to `array`, `addedItem` is called.&lt;/span&gt;
  &lt;span class="key"&gt;array&lt;/span&gt;: [],

  &lt;span class="comment"&gt;// When an item is added to `anotherArray`, `computed` is completely&lt;/span&gt;
  &lt;span class="comment"&gt;// recomputed.&lt;/span&gt;
  &lt;span class="key"&gt;anotherArray&lt;/span&gt;: [],

  &lt;span class="key"&gt;computed&lt;/span&gt;: Ember.reduceComputed(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;array&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;anotherArray.[]&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, {
    &lt;span class="key"&gt;addedItem&lt;/span&gt;: addedItemCallback,
    &lt;span class="key"&gt;removedItem&lt;/span&gt;: removedItemCallback
  })
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h4 class='anchorable-toc' id='toc_testing'&gt;Testing&lt;/h4&gt;
&lt;p&gt;Testability of Ember applications is an ongoing priority, and the 1.3 release
contains a number of updates that result in a dramatic improvement.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_custom-code-wait-code-hooks'&gt;Custom &lt;code&gt;wait()&lt;/code&gt; Hooks&lt;/h5&gt;
&lt;p&gt;You can now specify custom hooks to notify the asynchronous test helpers when all
async actions have completed. Under Ember 1.2 if you need to wait for an IndexDB
action, the default &lt;code&gt;wait&lt;/code&gt; implementation would not wait until that
action finished. Now you can simply register your own hook that will instruct wait
that it is truly time to continue.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;Ember.Test.registerWaiter(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
  &lt;span class="keyword"&gt;return&lt;/span&gt; hasPendingTransactions() == &lt;span class="integer"&gt;0&lt;/span&gt;;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This instructs the &lt;code&gt;wait&lt;/code&gt; helper that the async actions are not finished until
&lt;code&gt;hasPendingTransactions&lt;/code&gt; is zero.&lt;/p&gt;

&lt;p&gt;You can find more details &lt;a href="https://github.com/emberjs/ember.js/pull/3433"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_lazy-routing'&gt;Lazy Routing&lt;/h5&gt;
&lt;p&gt;Under Ember.js 1.2 routing is started as soon as you boot your application and &lt;em&gt;before&lt;/em&gt;
you call &lt;code&gt;visit&lt;/code&gt;. This results in duplicate routing which slows down your tests and also
potentially causes your tests to be less isolated.&lt;/p&gt;

&lt;p&gt;Under Ember.js 1.3 routing isn&amp;#39;t started until you call &lt;code&gt;visit&lt;/code&gt; for the first time. This
provides a couple of improvements to the way you test:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You do not need to call &lt;code&gt;App.advanceReadiness()&lt;/code&gt; in your test setup since the application
is automatically in a deferred state until calling &lt;code&gt;visit&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;App.reset()&lt;/code&gt; now leaves the application in the same state as &lt;code&gt;App.setupForTesting()&lt;/code&gt; (a
deferred state).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find more details &lt;a href="https://github.com/emberjs/ember.js/pull/3695"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h5 class='anchorable-toc' id='toc_stubbable-code-controllers-code-property'&gt;Stubbable &lt;code&gt;controllers&lt;/code&gt; Property&lt;/h5&gt;
&lt;p&gt;Prior to Ember 1.3 you could not easily stub out any dependencies specified with &lt;code&gt;needs&lt;/code&gt;.
Now you can unit test controllers and stub their dependencies all within
&lt;code&gt;TheControllerClass.create()&lt;/code&gt; instead of having to use a container, register stubbed
dependencies, and instantiate the controller via &lt;code&gt;container.lookup()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Simplified example:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; BrotherController = Ember.Controller.extend({
  &lt;span class="key"&gt;needs&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;sister&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="key"&gt;foo&lt;/span&gt;: Ember.computed.alias(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controllers.sister.foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

&lt;span class="keyword"&gt;var&lt;/span&gt; broController = BrotherController.create({
  &lt;span class="key"&gt;controllers&lt;/span&gt;: {
    &lt;span class="key"&gt;sister&lt;/span&gt;: { &lt;span class="key"&gt;foo&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt; }
  }
});

equal(broController.get(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;foo&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;), &lt;span class="integer"&gt;5&lt;/span&gt;, &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;`needs` dependencies can be stubbed&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Previously, specifying &lt;code&gt;controllers&lt;/code&gt; to &lt;code&gt;BrotherController&lt;/code&gt; would have resulted in an error,
and now under Ember.js 1.3 this works as expected.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_promise-improvements'&gt;Promise Improvements&lt;/h4&gt;
&lt;p&gt;Ember.js 1.3 has updated to &lt;code&gt;RSVP&lt;/code&gt; 3.0.3 which brings considerable performance improvements, a number
of new features, and significantly improved documentation coverage.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RSVP&lt;/code&gt; has added a number of features that allow external tooling to be able to inspect and track the labels, states, and
values of promises. These improvements will be extremely useful when used with the next major
version of the &lt;a href="https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi"&gt;Ember Inspector&lt;/a&gt;.
Which will allow you to see a tree of promises and inspect their names, state, and fulfilled/rejected values.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RSVP&lt;/code&gt; added a number of additional methods to &lt;code&gt;Promise&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Promise.cast&lt;/code&gt; - Coerces the given argument into a promise, or returns the argument if it is
already a promise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.catch&lt;/code&gt; - &lt;code&gt;catch&lt;/code&gt; is essentially syntactic sugar for &lt;code&gt;then(undefined, onRejection)&lt;/code&gt; which
makes it the same as the &lt;code&gt;catch&lt;/code&gt; block of a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; statement.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.finally&lt;/code&gt; - The callback provided to &lt;code&gt;Promise.finally&lt;/code&gt; will be invoked regardless of the
promises fate (both fulfilled and rejected promises). This is essentially similar to native
&lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; statements.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.race&lt;/code&gt; - Will return a new promise which will be settled with the value of
the first promise that settles. In other words: given an array of promises &lt;code&gt;Promise.race&lt;/code&gt;
will return the value from the first argument that settles (like the winner in a &amp;quot;race&amp;quot;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please review &lt;a href="/api/modules/RSVP.html"&gt;the documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_other-improvements'&gt;Other Improvements&lt;/h4&gt;
&lt;p&gt;As usual, there are a ton of bug fixes and small improvements in this
release. You can see a list of all the changes in the CHANGELOG:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.3.0/CHANGELOG.md"&gt;Ember.js 1.3.0 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/emberjs/ember.js/blob/v1.4.0-beta.1/CHANGELOG.md"&gt;Ember.js 1.4.0 beta 1 CHANGELOG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>What's Coming in Ember in 2014</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2013/12/17/whats-coming-in-ember-in-2014.html"/>
    <id>http://emberjs.cn/blog/2013/12/17/whats-coming-in-ember-in-2014.html</id>
    <published>2013-12-17T00:00:00Z</published>
    <updated>2013-12-17T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;Every few months, the Ember core team likes to get together to discuss
issues face-to-face and set our priorities for the following quarter.&lt;/p&gt;

&lt;p&gt;This time, we all converged on Portland, Oregon for the weekend to
figure out where to focus our energy in 2014.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Every few months, the Ember core team likes to get together to discuss
issues face-to-face and set our priorities for the following quarter.&lt;/p&gt;

&lt;p&gt;This time, we all converged on Portland, Oregon for the weekend to
figure out where to focus our energy in 2014.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_build-tools-modules'&gt;Build Tools &amp;amp; Modules&lt;/h2&gt;
&lt;p&gt;We spent the majority of our time discussing a unified plan that
combines ES6 modules with fast, robust, full-featured build tools for
Ember developers.&lt;/p&gt;

&lt;p&gt;One thing I love about the Ember community is that it values quality
over raw implementation speed. For us, it&amp;#39;s more important &lt;a href="http://merrickchristensen.com/articles/scenario-vs-problem-solving.html"&gt;to solve
problems than to solve
scenarios&lt;/a&gt;,
because scenario solving leads to fragmented solutions that don&amp;#39;t scale
or compose as your app grows.&lt;/p&gt;

&lt;p&gt;So far, we&amp;#39;ve held off on endorsing any particular build tool because,
while we&amp;#39;ve investigated all of them thoroughly, the currently-available
options all have fatal flaws that make them unpleasant to use as your
app gets larger.&lt;/p&gt;

&lt;p&gt;Many people have also been asking us about modules. When we started
Ember, there were no popular module formats. Since then, both CommonJS
modules on the server and AMD modules in the browser have exploded in
popularity. While both are great options, their ecosystems are
disconnected and the two communities frequently engage in emacs/vi-style
holy wars.&lt;/p&gt;

&lt;p&gt;Fortunately, TC39, the committee in charge of maintaining JavaScript,
recognized the need for a unified module system. ES6 modules offer the
best of both AMD and CommonJS modules while being integrated directly
into the language.&lt;/p&gt;

&lt;p&gt;Just as the Ember community was one of the first to fully embrace
JavaScript promises, we have spent the last few months working on making
ES6 modules a reality and bringing them to production.&lt;/p&gt;

&lt;p&gt;Two notable projects have come out of this work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.thomasboyt.com/2013/06/21/es6-module-transpiler"&gt;ES6 Module Transpiler&lt;/a&gt;,
which can transpile JavaScript written in the ES6 module syntax down
into browser globals, AMD or CommonJS.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://embersherpa.com/articles/introduction-to-ember-app-kit/"&gt;Ember App Kit&lt;/a&gt;, a foundation
for building Ember apps that uses ES6 modules (via the transpiler)
instead of globals.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#39;s important to note that we have been planning for module support for
some time. In fact, one of the last features that was blocking our
initial 1.0 release was to have the entire framework go through an object
called the &lt;em&gt;resolver&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The resolver is the part of our dependency injection system that is
responsible for determining naming conventions. For example, imagine a
user visits your Ember application at &lt;code&gt;/posts&lt;/code&gt;. By default, Ember will
look for a template called &lt;code&gt;posts&lt;/code&gt;, ask the &lt;code&gt;App.PostsRoute&lt;/code&gt; for a
model, and hook it all up to the &lt;code&gt;App.PostsController&lt;/code&gt;. But these
globals are not hardcoded into the framework—instead, there&amp;#39;s a default
resolver that encapsulates all of these naming conventions.&lt;/p&gt;

&lt;p&gt;To write an Ember app that uses modules, it&amp;#39;s as simple as swapping out
the default resolver for one that requires named modules instead of
looking for globals.&lt;/p&gt;

&lt;p&gt;In order to make it really nice, however, we believe we need
command-line tools to smooth the process of creating, developing, and
deploying apps.&lt;/p&gt;

&lt;p&gt;Our focus for the first quarter of 2014 will be to develop first-class
build tools that leverage existing tools where they fit our needs, and
write new ones where the current options fall down. We&amp;#39;ll make modules a
first-class citizen, and soon every developer who starts using Ember
will also be using ES6 modules. We&amp;#39;re excited about a world where
browser and server JavaScript packages live together in harmony.&lt;/p&gt;

&lt;p&gt;To give you an idea of what we&amp;#39;re thinking, here are some example CLI
commands and their effects. Note that this is all under heavy
development and is subject to change.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_initializing-an-app'&gt;Initializing an App&lt;/h3&gt;&lt;div class="highlight sh "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ember new my-app
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This initializes a new Ember.js project and generates stub directories,
an app, a router, etc.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_starting-the-development-server'&gt;Starting the Development Server&lt;/h3&gt;&lt;div class="highlight sh "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ember server
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_running-tests'&gt;Running Tests&lt;/h3&gt;&lt;div class="highlight sh "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ember test
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Runs the QUnit tests using Karma (PhantomJS plus available
browsers), although we are planning migrate to testem as we&amp;#39;ve found its
output easier to work with.&lt;/p&gt;

&lt;p&gt;You can also host the QUnit test harness for manual testing by
running:&lt;/p&gt;
&lt;div class="highlight sh "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;ember test:server
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h2 class='anchorable-toc' id='toc_adding-packages'&gt;Adding Packages&lt;/h2&gt;
&lt;p&gt;The Ember CLI supports bower natively. Just use the commands
you&amp;#39;re used to:&lt;/p&gt;
&lt;div class="highlight sh "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;bower install moment
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The lingua franca module format in Ember is ES6 modules. We will do the
work to ensure that bower modules are usable by Ember apps
automatically, by shimming AMD, CommonJS and browser global packages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Provide a &lt;code&gt;shim.json&lt;/code&gt; and &lt;code&gt;shim&lt;/code&gt; directory for AMD shims&lt;/li&gt;
&lt;li&gt;Name anonymous module based on filesystem location (including
versions)&lt;/li&gt;
&lt;li&gt;Concatenate modules into app.js (with source map)&lt;/li&gt;
&lt;li&gt;Inherit source maps from bower (if provided)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Even if a library was shipped as AMD, you would be able to use it as
though it was an ES6 module:&lt;/p&gt;
&lt;div class="highlight js "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="reserved"&gt;import&lt;/span&gt; md from &lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;markdown&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Every time a file changes, the final concatenated file loaded by the
browser (app.js, app.css, etc.) is locked and any HTTP requests for it
block until the new version is compiled.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_enhanced-inspector-features'&gt;Enhanced Inspector Features&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;re developing your app using the Ember CLI tools, the Chrome and
Firefox inspectors get even better. The development server will open a
socket that the inspector can connect to that will provide additional
environmental information to the browser extension.&lt;/p&gt;

&lt;p&gt;There are lots of exciting things you can do once your browser and
development tools are talking to each other, but some of the ideas we&amp;#39;ve
tossed around are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seeing a list of installed bower packages&lt;/li&gt;
&lt;li&gt;Seeing the results of test runs&lt;/li&gt;
&lt;li&gt;Linting and auditing your codebase&lt;/li&gt;
&lt;li&gt;Configuring package.json using visual editor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='anchorable-toc' id='toc_filesystem-layout'&gt;Filesystem Layout&lt;/h2&gt;
&lt;p&gt;Here is a rough example of the kind of layout you might see when
initializing a new Ember app via the CLI:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;app/
  controllers/
  models/
  fonts/
  …
config/
  shim.json
vendor/
  underscore.js    // bower installed
  markdown.js
lib/
  ember-histogram/ // incubator for packages
    skylight/
    bower.json 
modules/           // non-MVC stuff
  underscore.js
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_pod-directory-structure'&gt;&amp;quot;Pod&amp;quot; Directory Structure&lt;/h3&gt;
&lt;p&gt;Right now, many Ember projects have adopted a Rails-style directory
layout where everything is grouped by type:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;app/
  controllers/
    post.js
    posts.js
    index.js
  models/
    post.js
    user.js
  templates/
    post.handlebars
    posts.handlebars
    index.handlebars
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We discussed moving this to a layout where related features are
grouped together in &amp;quot;pods&amp;quot; of functionality:&lt;/p&gt;
&lt;div class="highlight  "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
21
22
23
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;app/
  config/
    application.js
  serializers/
  models/
    post.js
    user.js
  mixins/
pods/
  post/
    controller.js
    template.handlebars
  posts/
    controller.js
    template.handlebars
  index/
    controller.js
    template.handlebars
components/
  google-map/
    component.handlebars
    component.js
    component.css
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This proposed directory structure is still up for lots of discussion.
We&amp;#39;ve been looking at many different real world apps to see if this
makes managing the source code for Ember apps any easier.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_slimming-down-ember-js-project-svelte'&gt;Slimming Down Ember.js (Project Svelte)&lt;/h2&gt;
&lt;p&gt;We believe there are several areas in the Ember codebase that have the
potential to be slimmed down substantially. We&amp;#39;d like to pick a target
filesize and have a sprint to get the total built framework size under
that target.&lt;/p&gt;

&lt;p&gt;We haven&amp;#39;t picked a target size yet, but we tossed around the 50k figure.
We&amp;#39;ll have more information about this once we&amp;#39;ve made a list of good
candidates for slimming action.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_distributing-components'&gt;Distributing Components&lt;/h2&gt;
&lt;p&gt;There are a number of open issues around distributing reusable,
third-party components and libraries of components. Typically we defer
to the Web Components spec, but there are areas where the spec does not
currently provide any guidance. As we deal with them, we are keen to
provide feedback to the Web Components spec authors with how we have
chosen to solve the problems.&lt;/p&gt;

&lt;p&gt;Other limitations are due to certain features not being available in
older browsers, and we are working on polyfilling and working around
those issues so that you can enjoy the power of Web Components today in
browsers all the way back to IE8.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_namespacing'&gt;Namespacing&lt;/h3&gt;
&lt;p&gt;Right now, Ember components share a global namespace. If I have a
component called &lt;code&gt;area-graph&lt;/code&gt; and you have a component called
&lt;code&gt;area-graph&lt;/code&gt; and I want to use your component in my app, we will have a
collision.&lt;/p&gt;

&lt;p&gt;Soon, components in packages will be addressable by a fully-qualified path.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a notional area graph component:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;area-graph&lt;/span&gt;&lt;span class="error"&gt;@&lt;/span&gt;&lt;span class="attribute-name"&gt;d3&lt;/span&gt; &lt;span class="attribute-name"&gt;xValue&lt;/span&gt;=&lt;span class="attribute-value"&gt;responseTimes&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you find yourself typing the fully-qualified path often, you will be
able to alias the helper in the lexical scope of the Handlebars template:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;import&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;area-graph&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt; &lt;span class="attribute-name"&gt;from&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;d3&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We may also add a syntax for making all helpers in a package available:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;import&lt;/span&gt; &lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="attribute-name"&gt;d3&lt;/span&gt;&lt;span class="error"&gt;&amp;quot;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_template-versioning-compilation'&gt;Template Versioning/Compilation&lt;/h3&gt;
&lt;p&gt;Handlebars compiles templates down into an intermediate AST. This AST
can change between Handlebars versions. Additionally, Handlebars syntax
may be extended, or change in version 2.0. &lt;/p&gt;

&lt;p&gt;Given that components are distributed on bower, should they be shipped
with their templates pre-compiled, or should we leave it up to ember-cli
to compile them on-demand?&lt;/p&gt;

&lt;p&gt;Currently, we are leaning towards shipping templates in their raw source
form, but we need to do some more investigation.&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_scoped-css'&gt;Scoped CSS&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;style scoped&amp;gt;&lt;/code&gt; is not available today in many browsers. Distributed
components will get a uuid associated with them, and all of their CSS
rules will be wrapped in a selector that limits them to elements with
that uuid as a class name.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_item-controller'&gt;Item Controller&lt;/h2&gt;
&lt;p&gt;Instead of doing &lt;code&gt;{{#each itemController=&amp;quot;postItem&amp;quot;}}&lt;/code&gt;, you can just
define &lt;code&gt;App.PostsItemController&lt;/code&gt; (or the &lt;code&gt;app/controllers/posts-item&lt;/code&gt;
module) and it will be wired up automatically.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_htmlbars'&gt;HTMLBars&lt;/h2&gt;
&lt;p&gt;HTMLBars is on track and will hopefully be available behind a feature
flag sometime in the new year. Yehuda spent some time going over the
implementation with Kris Selden and Alex Matchneer. They are going to be
taking over the effort of integrating the HTMLBars compiler into Ember
proper.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re not familiar with HTMLBars, it is a compiler that knows about
both HTML5 and Handlebars syntax. This is important for two reasons.&lt;/p&gt;

&lt;p&gt;First, it will allow us to deprecate the &lt;code&gt;{{bind-attr}}&lt;/code&gt; Handlebars
helper. Instead of this:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;bind-attr&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="attribute-value"&gt;imageUrl&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You will be able to say:&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="attribute-name"&gt;src&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;imageUrl&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Second, it will also allow us to eliminate the ugly metamorph.js script
tags that we currently use to track bound values in the DOM.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what the DOM looks like before HTMLBars:&lt;/p&gt;

&lt;p&gt;&lt;img
src="/images/blog/2013-12-17-whats-coming-in-ember-in-2014/with-metamorph.png"&gt;&lt;/p&gt;

&lt;p&gt;And after:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2013-12-17-whats-coming-in-ember-in-2014/without-metamorph.png"&gt;&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_eliminate-jquery-dependency'&gt;Eliminate jQuery Dependency&lt;/h2&gt;
&lt;p&gt;Once we move over to HTMLBars, the interaction between Ember.js and the
DOM gets smaller. We can probably treat jQuery as an optional dependency
and only use it if it is available via globals or as an AMD module. We
just want to make sure that we remove components/views using jQuery if its
available so that jQuery UI widgets that have stored data in the DOM via
jQuery.data() get cleaned up appropriately.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_animation'&gt;Animation&lt;/h2&gt;
&lt;p&gt;We&amp;#39;re still working on having animation support be built in to the
framework, but we don&amp;#39;t have any specific API proposals to share at this
time. As always, we prioritize getting the API correct the first time
rather than having to re-do it in a later release.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ie8-support'&gt;IE8 Support&lt;/h2&gt;
&lt;p&gt;Despite the imminent End of Life status of Windows XP, we will continue
supporting Internet Explorer 8. We know many Ember.js users still need
to target enterprise and education customers, who will be on IE8 for
some time.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_emberconf'&gt;EmberConf&lt;/h2&gt;
&lt;p&gt;EmberConf 2014: It&amp;#39;s happening. We&amp;#39;ll have more details available very
soon, but I will say that you should keep March as free as you can.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_emberdart'&gt;EmberDart&lt;/h2&gt;
&lt;p&gt;Just kidding.&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_how-you-can-help'&gt;How You Can Help&lt;/h2&gt;
&lt;p&gt;As we&amp;#39;ve said before, Ember is a completely community-driven project.
I&amp;#39;d like to thank all of the core team members who pay out-of-pocket for
travel and accommodation so they can be at these meetings.&lt;/p&gt;

&lt;p&gt;It has been extremely rewarding to watch the Ember community grow, and
also to see it assume a position of leadership in the JavaScript
community.&lt;/p&gt;

&lt;p&gt;We need your help to keep pushing the boundaries of what&amp;#39;s possible in
the browser. If you&amp;#39;d like to get started helping out, please join us in
&lt;code&gt;#emberjs-dev&lt;/code&gt; on Freenode, where our helpful community can point you in
the right direction. (If you just need help with developing your Ember
app, please keep those questions in &lt;code&gt;#emberjs&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;If there&amp;#39;s anything we&amp;#39;ve forgotten to mention here, please feel free to
let us know what you&amp;#39;d like to see in the comments below!&lt;/p&gt;
&lt;h2 class='anchorable-toc' id='toc_ember-data'&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;We&amp;#39;ve got lots of exciting stuff coming in Ember Data. Expect an update
on our roadmap there in a separate blog post soon.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/2013-12-17-whats-coming-in-ember-in-2014/1.jpg"&gt;
&lt;img src="/images/blog/2013-12-17-whats-coming-in-ember-in-2014/2.jpg"&gt;
&lt;img src="/images/blog/2013-12-17-whats-coming-in-ember-in-2014/3.jpg"&gt;
&lt;img src="/images/blog/2013-12-17-whats-coming-in-ember-in-2014/4.jpg"&gt;
&lt;img src="/images/blog/2013-12-17-whats-coming-in-ember-in-2014/5.jpg"&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>完成Ember指南中文翻译</title>
    <link rel="alternate" href="http://emberjs.cn/blog/2013/12/05/finish-translations.html"/>
    <id>http://emberjs.cn/blog/2013/12/05/finish-translations.html</id>
    <published>2013-12-05T00:00:00Z</published>
    <updated>2013-12-05T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;Ember.js中文站&lt;a href="http://emberjs.cn"&gt;http://emberjs.cn&lt;/a&gt;，诞生在浪漫的情人节之后的一天。时至今日，已过去了338个日夜。在这期间Ember.js改变了很多：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember.js从第一个RC走到了如今1.2.0版本的正式发布&lt;/li&gt;
&lt;li&gt;Ember Data也迎来了新的1.0接口的beta发布&lt;/li&gt;
&lt;li&gt;第三方插件也如雨后春笋帮开始涌现到社区&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么我们Ember.js中文站又发生了些什么改变呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先我们完成了指南的中文化工作&lt;/li&gt;
&lt;li&gt;再而我们拥有了供我们中文社区进行交流的平台&lt;/li&gt;
&lt;/ul&gt;
</summary>
    <content type="html">&lt;p&gt;Ember.js中文站&lt;a href="http://emberjs.cn"&gt;http://emberjs.cn&lt;/a&gt;，诞生在浪漫的情人节之后的一天。时至今日，已过去了338个日夜。在这期间Ember.js改变了很多：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember.js从第一个RC走到了如今1.2.0版本的正式发布&lt;/li&gt;
&lt;li&gt;Ember Data也迎来了新的1.0接口的beta发布&lt;/li&gt;
&lt;li&gt;第三方插件也如雨后春笋帮开始涌现到社区&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么我们Ember.js中文站又发生了些什么改变呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先我们完成了指南的中文化工作&lt;/li&gt;
&lt;li&gt;再而我们拥有了供我们中文社区进行交流的平台

&lt;ul&gt;
&lt;li&gt;论坛：&lt;a href="http://discuss.emberjs.cn"&gt;http://discuss.emberjs.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;QQ群：298026365&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;另外我们还发布了第一个开源项目&lt;a href="https://github.com/emberjs-cn/intimi"&gt;intimi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中文社区能走到今天，要多谢大家的参与和支持，特别是那些热心于为初学者解惑答疑的朋友们，以及牺牲了很多自己的业余时间参与到指南翻译、Intimi开发的朋友们。&lt;/p&gt;

&lt;p&gt;Ember.js官方指南到今天已经完成了全部的翻译工作，由于翻译工作时间跨度大（338个日夜），参与的人数众多，前期也没有对一些名词，语态进行约定，总体工作完成的还不是很完善，主要表现在如下几个方面：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;与官方指南同步出现差错&lt;/li&gt;
&lt;li&gt;翻译时使用的人称不一致&lt;/li&gt;
&lt;li&gt;翻译结果与原文表达意思有出入&lt;/li&gt;
&lt;li&gt;存在大量的错别字&lt;/li&gt;
&lt;li&gt;等等。。。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对存在的这些不足，我们在此向大家致歉，同时也希望大家在发现我们的错误的时候，积极的给我们发&lt;a href="https://github.com/emberjs-cn/www.emberjs.cn/issues"&gt;Issue&lt;/a&gt;，或者&lt;a href="https://github.com/emberjs-cn/www.emberjs.cn"&gt;Pull Request&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;最后，我们再来一同展望一下Ember.js中文站未来一年的发展计划：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;持续跟踪和翻译Ember.js官方文档&lt;/li&gt;
&lt;li&gt;定期撰写Ember.js开发相关技术文档&lt;/li&gt;
&lt;li&gt;开发更多的能简化大家日常开发工作的Ember Package&lt;/li&gt;
&lt;li&gt;组织数次Ember.js技术交流会议/沙龙&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果大家有什么更好的想法，可以拍上来，共谋大业！&lt;/p&gt;

&lt;p&gt;谢谢大家不离不弃的支持！&lt;/p&gt;
</content>
  </entry>
</feed>
