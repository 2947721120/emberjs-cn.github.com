<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EmberJS.CN Blog</title>
  <subtitle>Ember JS相关新闻与资源</subtitle>
  <id>http://emberjs.cn/blog</id>
  <link href="http://emberjs.cn/blog"/>
  <link href="http://emberjs.cn/blog/feed.xml" rel="self"/>
  <updated>2013-05-24T00:00:00Z</updated>
  <author>
    <name>EmberJS.CN</name>
  </author>
  <entry>
    <title>第五期周报</title>
    <link rel="alternate" href="/blog/2013/05/24/ember-js-weekly.html"/>
    <id>/blog/2013/05/24/ember-js-weekly.html</id>
    <published>2013-05-24T00:00:00Z</published>
    <updated>2013-05-24T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;视频&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-embercasts-com-episodes-getting-started-with-ember-model-ember-model-a'&gt;&lt;a href="http://www.embercasts.com/episodes/getting-started-with-ember-model"&gt;Ember Model入门&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本视频介绍了如何使用&lt;a href="https://github.com/ebryn/ember-model"&gt;Ember Model&lt;/a&gt;。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-embercasts-com-episodes-getting-started-with-emblem-js-emblem-js-a'&gt;&lt;a href="http://www.embercasts.com/episodes/getting-started-with-emblem-js"&gt;Emblem.js入门&lt;/a&gt;&lt;/h4&gt;</summary>
    <content type="html">&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;视频&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-embercasts-com-episodes-getting-started-with-ember-model-ember-model-a'&gt;&lt;a href="http://www.embercasts.com/episodes/getting-started-with-ember-model"&gt;Ember Model入门&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本视频介绍了如何使用&lt;a href="https://github.com/ebryn/ember-model"&gt;Ember Model&lt;/a&gt;。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-embercasts-com-episodes-getting-started-with-emblem-js-emblem-js-a'&gt;&lt;a href="http://www.embercasts.com/episodes/getting-started-with-emblem-js"&gt;Emblem.js入门&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Emblem.js是一个基于缩进的模板语言，它编译的结果与Handlebars模板一样，因此完全兼容Ember.js。本视频主要介绍了Emblem的语法和如何使用Emblem.js来写模板。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-youtube-com-watch-v-bs6xz-pxbvu-ember-js-phonegap-a'&gt;&lt;a href="http://www.youtube.com/watch?v=Bs6xz-pxBVU"&gt;采用Ember.js和PhoneGap构建移动应用&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;视频中介绍了如何采用Ember.js和PhoneGap来构建一个移动应用，通过观看该视频，你会发现原来一切来的如此简单。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-embercasts-com-episodes-building-an-autocomplete-widget-part-1-a'&gt;&lt;a href="http://www.embercasts.com/episodes/building-an-autocomplete-widget-part-1"&gt;构建一个自动补全控件（一）&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本视频是关于如何构建一个自动补全控件的视频的第一部分，主要介绍了如何构建一个自动补全控件的基础。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-embercasts-com-episodes-client-side-authentication-part-1-a'&gt;&lt;a href="http://www.embercasts.com/episodes/client-side-authentication-part-1"&gt;客户端身份验证（一）&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;客户端身份验证系列视频总共分为两部分，第一部分主要介绍了客户端如何实现基于令牌的身份验证来从服务器端获取数据。视频重点介绍了如何构建一个登录表单来获取令牌。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;库、代码和工具&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-flamejs-flame-js-flame-js-a'&gt;&lt;a href="https://github.com/flamejs/flame.js"&gt;flame.js&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Flame.js是一个Ember.js的控件库。目标是提供一个类似桌面应用风格的控件库。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;特别感谢@ZOwl提供该库的信息。&lt;/em&gt;&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-ebryn-ember-model-ember-model-a'&gt;&lt;a href="https://github.com/ebryn/ember-model"&gt;ember-model&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ember Model(EM)是一个简单的、轻量级的Ember模型库，ember-model主要提供了一个构建在$.ajax之上的一些操作，通过这些操作可以方便的实现与服务器的交互。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>第四期周报</title>
    <link rel="alternate" href="/blog/2013/05/17/ember-js-weekly.html"/>
    <id>/blog/2013/05/17/ember-js-weekly.html</id>
    <published>2013-05-17T00:00:00Z</published>
    <updated>2013-05-17T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://blogs.msdn.com/b/silverlining/archive/2013/05/07/ember-js-and-windows-azure-mobile-services-part-1.aspx"&gt;结合Ember.js和Windows Azure移动服务开发Web客户端&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一个系列教程，总共分为四部分，作者Larry Franks详细的介绍了如何采用Ember.js来开发一个基于Windows Azure移动服务的单页应用，最后还介绍了如何将做好的应用部署到Windows Azure Web站点。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://blogs.msdn.com/b/silverlining/archive/2013/05/07/ember-js-and-windows-azure-mobile-services-part-1.aspx"&gt;结合Ember.js和Windows Azure移动服务开发Web客户端&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一个系列教程，总共分为四部分，作者Larry Franks详细的介绍了如何采用Ember.js来开发一个基于Windows Azure移动服务的单页应用，最后还介绍了如何将做好的应用部署到Windows Azure Web站点。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-dev-mygrid-org-uk-blog-p-97-ember-js-mvc-a'&gt;&lt;a href="http://dev.mygrid.org.uk/blog/?p=97"&gt;Ember JS: 浏览器端MVC，第三部分 – 嵌套资源&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一个以Ember.js为例，介绍浏览器端MVC的系列教程，本篇为第三篇，重点介绍了Ember.js中的嵌套资源。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;视频&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-youtube-com-watch-v-bs6xz-pxbvu-ember-js-phonegap-a'&gt;&lt;a href="http://www.youtube.com/watch?v=Bs6xz-pxBVU"&gt;采用Ember.js和PhoneGap构建移动应用&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;视频中介绍了如何采用Ember.js和PhoneGap来构建一个移动应用，通过观看该视频，你会发现原来一切来的如此简单。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;库、代码和工具&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-bartsqueezy-ember-handlebars-brunch-git-ember-handlebars-brunch-a'&gt;&lt;a href="https://github.com/bartsqueezy/ember-handlebars-brunch.git"&gt;ember-handlebars-brunch&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一个&lt;a href="http://brunch.io/"&gt;Brunch&lt;/a&gt;插件，支持在运行期前将handlebars模板进行预编译。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>第三期周报</title>
    <link rel="alternate" href="/blog/2013/05/09/ember-js-weekly.html"/>
    <id>/blog/2013/05/09/ember-js-weekly.html</id>
    <published>2013-05-09T00:00:00Z</published>
    <updated>2013-05-09T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-thesoftwaresimpleton-com-blog-2013-04-27-macro-ember-js-a'&gt;&lt;a href="http://www.thesoftwaresimpleton.com/blog/2013/04/27/macro/"&gt;在Ember.js中创建计算宏&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在定义计算属性的时候，经常会碰到多个属性需要编写大致相同的逻辑代码。通过计算宏，可以将这种重复降低到最低。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-jsonapi-org-ember-js-json-apis-a'&gt;&lt;a href="http://jsonapi.org"&gt;Ember.js JSON APIs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;详细介绍了JSON
APIs的两种不同风格（ID风格和URL风格）。ID风格简单易用，也是我们通常采用的风格，其问题在于需要客户端能够根据ID来猜测API的地址，这样会将服务端API的结构禁锢，当API变得庞大时，可能会导致问题。@wycats建议我们先从ID风格的入手，如果可能的话，再换成URL风格的。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-thesoftwaresimpleton-com-blog-2013-04-27-macro-ember-js-a'&gt;&lt;a href="http://www.thesoftwaresimpleton.com/blog/2013/04/27/macro/"&gt;在Ember.js中创建计算宏&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在定义计算属性的时候，经常会碰到多个属性需要编写大致相同的逻辑代码。通过计算宏，可以将这种重复降低到最低。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-jsonapi-org-ember-js-json-apis-a'&gt;&lt;a href="http://jsonapi.org"&gt;Ember.js JSON APIs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;详细介绍了JSON
APIs的两种不同风格（ID风格和URL风格）。ID风格简单易用，也是我们通常采用的风格，其问题在于需要客户端能够根据ID来猜测API的地址，这样会将服务端API的结构禁锢，当API变得庞大时，可能会导致问题。@wycats建议我们先从ID风格的入手，如果可能的话，再换成URL风格的。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-it-ebooks-info-book-2032-ember-js-application-development-how-to-a'&gt;&lt;a href="http://it-ebooks.info/book/2032/"&gt;Ember.js Application Development How-to&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本书通过一个实际的例子一步步为你介绍了如何开发一个Ember.js应用。另外，其中还包括了一些高级的关于Ember.js核心概念的例子，有助于你进一步扩展你对Ember.js的认识和技巧。感谢&lt;a href="http://discuss.emberjs.cn/users/inDream"&gt;@inDream&lt;/a&gt;分享！&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;视频&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-youtube-com-watch-v-i3vejbjv8sk-ember-listview-a'&gt;&lt;a href="http://www.youtube.com/watch?v=i3vEjbjV8Sk"&gt;Ember.ListView介绍&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本视频介绍了一个Ember.js的新控件 - Ember.ListView。列表视图是在开发应用过程中非常常用的一个控件。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;库、代码和工具&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-jamesarosen-ember-i18n-ember-i18n-a'&gt;&lt;a href="https://github.com/jamesarosen/ember-i18n"&gt;ember-i18n&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一个简单使用的国际化工具，可以让我们的Ember.js很容易的支持国际化。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-emberjs-ember-dev-ember-dev-a'&gt;&lt;a href="https://github.com/emberjs/ember-dev"&gt;ember-dev&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ember-dev是一个用于开发Ember.js扩展的一个辅助工具，&lt;a href="https://github.com/emberjs/data"&gt;ember-data&lt;/a&gt;便是基于ember-dev来构建的。如果准备开发一个Ember.js的扩展，这将是你的不二之选。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>第二期周报</title>
    <link rel="alternate" href="/blog/2013/05/02/ember-js-weekly.html"/>
    <id>/blog/2013/05/02/ember-js-weekly.html</id>
    <published>2013-05-02T00:00:00Z</published>
    <updated>2013-05-02T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;em&gt;本期对周报的内容进行了一点小的调整，就是主要内容的标题如果是英文的对被翻译为中文。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-tech-pro-tutorial-1249-modern-emberjs-application-workflow-with-yeoman-and-mocha-yeoman-mocha-ember-js-a'&gt;&lt;a href="http://tech.pro/tutorial/1249/modern-emberjs-application-workflow-with-yeoman-and-mocha"&gt;运用Yeoman和Mocha的Ember.js应用开发工作流&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章介绍了如何使用&lt;code&gt;Yeoman&lt;/code&gt;来构建一个Ember.js应用。其中包括如何使用&lt;code&gt;Yeoman&lt;/code&gt;来创建一个应用结构，如何编译，如何运行和如何测试等。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;em&gt;本期对周报的内容进行了一点小的调整，就是主要内容的标题如果是英文的对被翻译为中文。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-tech-pro-tutorial-1249-modern-emberjs-application-workflow-with-yeoman-and-mocha-yeoman-mocha-ember-js-a'&gt;&lt;a href="http://tech.pro/tutorial/1249/modern-emberjs-application-workflow-with-yeoman-and-mocha"&gt;运用Yeoman和Mocha的Ember.js应用开发工作流&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章介绍了如何使用&lt;code&gt;Yeoman&lt;/code&gt;来构建一个Ember.js应用。其中包括如何使用&lt;code&gt;Yeoman&lt;/code&gt;来创建一个应用结构，如何编译，如何运行和如何测试等。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;视频&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-youtube-com-watch-v-obawh8xl2c0-ember-js-rss-a'&gt;&lt;a href="http://www.youtube.com/watch?v=obaWh8xL2C0"&gt;从零开始使用Ember.js构建RSS阅读器&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Gordon通过一个40分钟的视频，讲述了如何使用Ember.js从零开始来构建一个RSS阅读器。该阅读器实现的模型部分采用&lt;a href="https://github.com/emberjs/data"&gt;ember-data&lt;/a&gt;来实现。本视频可以帮助我们更深入的理解如何使用Ember.js去构建优秀的应用。&lt;a href="https://github.com/emberjs-seattle/ember-reader"&gt;示例代码下载&lt;/a&gt;&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-youtube-com-watch-v-no1hxt9gbts-ember-js-a'&gt;&lt;a href="http://www.youtube.com/watch?v=nO1hxT9GBTs"&gt;简单且快速的测试Ember.js应用&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Erik在视频中为我们介绍了如何使用&lt;a href="https://github.com/emberjs/ember.js/tree/master/packages/ember-testing"&gt;ember-testing&lt;/a&gt;对Ember.js应用进行验收测试。&lt;a href="https://github.com/emberjs/ember.js/tree/master/packages/ember-testing"&gt;ember-testing&lt;/a&gt;是Ember.js大家庭中新近加入的成员，旨在为我们提供一些列辅助测试的基础方法，方便我们为Ember.js应用编写测试。&lt;a href="https://github.com/ebryn/bloggr-client-rails/blob/master/test/javascripts/integration/bloggr_test.js"&gt;查看演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;库、代码和工具&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-stefanpenner-ember-inflector-ember-inflector-a'&gt;&lt;a href="https://github.com/stefanpenner/ember-inflector"&gt;ember-inflector&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;提供一个与rails兼容的inflector，参见&lt;a href="http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html"&gt;ActiveSupport::Inflector&lt;/a&gt;。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-addepar-ember-table-ember-table-a'&gt;&lt;a href="https://github.com/Addepar/ember-table"&gt;ember-table&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;表格是每个应用的核心控件之一，ember-table是一个非常优秀的采用Ember.js实现的表格控件。它几乎涵盖了大部分的应用场景，包括按列排序、树状表、Ajax加载、可编辑的单元格等等。&lt;a href="http://addepar.github.io/ember-table/"&gt;在线演示&lt;/a&gt;&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-heartsentwined-ember-auth-ember-auth-a'&gt;&lt;a href="https://github.com/heartsentwined/ember-auth"&gt;ember-auth&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/heartsentwined/ember-auth"&gt;ember-auth&lt;/a&gt;是一个基于token进行身份验证的库，它假定服务器端实现了基于token的身份验证。它将在登录成功后从服务器获取token，并在之后所有的针对模型的查询和持久化的操作上附加该token。在用户注销时销毁该token。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>两种方式实现用户管理(二)</title>
    <link rel="alternate" href="/blog/2013/04/25/two-different-ways-for-users-management-2.html"/>
    <id>/blog/2013/04/25/two-different-ways-for-users-management-2.html</id>
    <published>2013-04-25T00:00:00Z</published>
    <updated>2013-04-25T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;本文通过两种常见的方式实现了一个简单的用户管理。&lt;/p&gt;

&lt;p&gt;一种是采用跳转至一个新页面进行用户信息查看与修改；另一种是采用在同一个页面进行用户信息查看与修改。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.cn/blog/2013/04/25/two-different-ways-for-users-management-1.html"&gt;上一篇&lt;/a&gt;讲述使用第一种方案实现的过程。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;这一篇讲述使用第二种方案实现的过程。&lt;/h3&gt;
&lt;p&gt;首先是相同的创建应用：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App = Ember.Application.create();
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</summary>
    <content type="html">&lt;p&gt;本文通过两种常见的方式实现了一个简单的用户管理。&lt;/p&gt;

&lt;p&gt;一种是采用跳转至一个新页面进行用户信息查看与修改；另一种是采用在同一个页面进行用户信息查看与修改。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.cn/blog/2013/04/25/two-different-ways-for-users-management-1.html"&gt;上一篇&lt;/a&gt;讲述使用第一种方案实现的过程。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;这一篇讲述使用第二种方案实现的过程。&lt;/h3&gt;
&lt;p&gt;首先是相同的创建应用：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App = Ember.Application.create();


App.Store = DS.Store.extend({
    &lt;span class="key"&gt;revision&lt;/span&gt;: &lt;span class="integer"&gt;12&lt;/span&gt;,
    &lt;span class="key"&gt;adapter&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;DS.FixtureAdapter&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

App.User = DS.Model.extend({
    &lt;span class="key"&gt;name&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
    &lt;span class="key"&gt;email&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

App.User.FIXTURES = [
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user1@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user2&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user2@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user3@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;4&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user4&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user4@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user5&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user5@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
];
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义App的&lt;code&gt;template&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;    
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Users' example&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {{outlet}}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义&lt;code&gt;Router&lt;/code&gt;，这里与方案一中稍有不同：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.map(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;path&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;:user_id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
    });
});

App.IndexRoute = Ember.Route.extend({
    &lt;span class="function"&gt;redirect&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="local-variable"&gt;this&lt;/span&gt;.transitionTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义&lt;code&gt;UsersRoute&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UsersRoute = Ember.Route.extend({
    &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="keyword"&gt;return&lt;/span&gt; App.User.find();
    }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;users&lt;/code&gt;模板：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;list&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            {{#each controller}}
            &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{#linkTo 'user' this}}{{name}}{{/linkTo}}&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {{else}}
            &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;no users yet...&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {{/each}}
        &lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，就可以顺利地列出我们所有的&lt;code&gt;users&lt;/code&gt;了，上面的&lt;code&gt;linkTo&lt;/code&gt; helper就会为我们构造类似&lt;code&gt;#/users/2&lt;/code&gt;这样的url。&lt;/p&gt;

&lt;p&gt;开始&lt;code&gt;User&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;同样的，&lt;a href="http://www.emberjs.com"&gt;Ember&lt;/a&gt;自动为我们构造了&lt;code&gt;UserRoute&lt;/code&gt;，并使用了默认的&lt;code&gt;model&lt;/code&gt;方法，因此，这里并不需要显示地定义&lt;code&gt;UserRoute&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;定义&lt;code&gt;user&lt;/code&gt;的&lt;code&gt;template&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;name: {{name}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;email: {{email}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;但是此时，若我们点击user的链接，会发现页面并没有出现我们想要的user信息，这是因为Ember虽然render了我们user的模板，但是并不知道需要将它显示在页面的什么地方，因此，我们需要在我们的&lt;code&gt;users&lt;/code&gt;模板添加一个&lt;code&gt;outlet&lt;/code&gt;，Ember会自动将&lt;code&gt;user&lt;/code&gt; &lt;code&gt;render&lt;/code&gt;到此处。&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;list&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            {{#each controller}}
            &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{#linkTo 'user' this}}{{name}}{{/linkTo}}&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {{else}}
            &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;no users yet...&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {{/each}}
        &lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;detail&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;{{outlet}}&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这段代码的第11行，就是我们新添加的一个outlet。&lt;/p&gt;

&lt;p&gt;这样，其实我们就已经完成了在页面的另一区域显示我们点击的user的信息，后面我们可以给它添加一些常用的操作，比如说，修改操作。&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    {{&lt;span class="error"&gt;#&lt;/span&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; view.isEditing}}
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;name: {{view Ember.TextField valueBinding=&amp;quot;name&amp;quot; target=&amp;quot;view&amp;quot;}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;email: {{view Ember.TextField valueBinding=&amp;quot;email&amp;quot; target=&amp;quot;view&amp;quot;}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;button&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="error"&gt;{&lt;/span&gt;&lt;span class="error"&gt;{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;finishEdit&lt;/span&gt;&lt;span class="error"&gt;}&lt;/span&gt;&lt;span class="error"&gt;}&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Save&lt;span class="tag"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    {{&lt;span class="keyword"&gt;else&lt;/span&gt;}}
    &lt;span class="tag"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;button&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="error"&gt;{&lt;/span&gt;&lt;span class="error"&gt;{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;edit&lt;/span&gt;&lt;span class="error"&gt;}&lt;/span&gt;&lt;span class="error"&gt;}&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Edit&lt;span class="tag"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    {{&lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;if}}
    &amp;lt;p&amp;gt;name: {{name}}&amp;lt;&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;/span&gt;p&amp;gt;
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;email: {{email}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这段是修改过的&lt;code&gt;template&lt;/code&gt;，默认情况下，我们显示一个&lt;code&gt;Edit&lt;/code&gt;按钮，当我们点击它时，切换到编辑模式，同时显示一个保存按钮。&lt;/p&gt;

&lt;p&gt;同时，细心的你可以会发现，Ember自动为我们对应的user的链接添加了一个&lt;code&gt;.active&lt;/code&gt;的样式。因此我们只需要额外提供一个&lt;code&gt;.active&lt;/code&gt;样式就可以实现选中效果了。&lt;/p&gt;

&lt;p&gt;这里我们通过&lt;code&gt;{{#if
isEditing}}&lt;/code&gt;这个helper来判断当前是否处在编辑模式，并使用Ember提供的TextField，将它与对应的&lt;code&gt;attribute&lt;/code&gt;绑定（&lt;code&gt;valueBinding&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;我们将这个方法放在&lt;code&gt;UserView&lt;/code&gt;内&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UserView = Ember.View.extend({
    &lt;span class="key"&gt;isEditing&lt;/span&gt;: &lt;span class="predefined-constant"&gt;false&lt;/span&gt;,

    &lt;span class="function"&gt;edit&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isEditing&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;true&lt;/span&gt;);
    },
    &lt;span class="function"&gt;finishEdit&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isEditing&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;false&lt;/span&gt;);
        &lt;span class="comment"&gt;//this.get('controller.model.transaction').commit();&lt;/span&gt;
    }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，当&lt;code&gt;UserView&lt;/code&gt;的&lt;code&gt;isEditing&lt;/code&gt;变化时，Ember会自动为我们重新render页面。&lt;/p&gt;

&lt;p&gt;这里将这个变量放在&lt;code&gt;UserView&lt;/code&gt;而不是放在&lt;code&gt;UserController&lt;/code&gt;内的原因主要是，放在&lt;code&gt;UserController&lt;/code&gt;内，当我们在一个user下处于编辑状态时，当我们点击到另外一个user，需要手动地将controller的&lt;code&gt;isEditing&lt;/code&gt;置为&lt;code&gt;false&lt;/code&gt;，否则将会出现点击直接出现编辑界面的情况。而在&lt;code&gt;方案一&lt;/code&gt;中，这种情况就不一样了，就可以放在&lt;code&gt;UserController&lt;/code&gt;内了。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;总结&lt;/h3&gt;
&lt;p&gt;方案一与方案二的区别在于方案二采用的是嵌套的路由与嵌套的视图，因此大家会发现方案一中的&lt;code&gt;App.Router&lt;/code&gt;与方案二是不一样的。&lt;/p&gt;

&lt;p&gt;自己来尝试一下吧！！！&lt;/p&gt;

&lt;p&gt;方案二示例：&lt;a href="http://jsfiddle.net/pudgecon/gZeN2/5/"&gt;http://jsfiddle.net/pudgecon/gZeN2/5/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>两种方式实现用户管理(一)</title>
    <link rel="alternate" href="/blog/2013/04/25/two-different-ways-for-users-management-1.html"/>
    <id>/blog/2013/04/25/two-different-ways-for-users-management-1.html</id>
    <published>2013-04-25T00:00:00Z</published>
    <updated>2013-04-25T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;本文共两篇文章，通过两种常见的方式实现了一个简单的用户管理。&lt;/p&gt;

&lt;p&gt;一种是采用跳转至一个新页面进行用户信息查看与修改；另一种是采用在同一个页面进行用户信息查看与修改。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;第一篇讲述使用第一种方案实现的过程。&lt;/h3&gt;
&lt;p&gt;首先是创建应用：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App = Ember.Application.create();


App.Store = DS.Store.extend({
    &lt;span class="key"&gt;revision&lt;/span&gt;: &lt;span class="integer"&gt;12&lt;/span&gt;,
    &lt;span class="key"&gt;adapter&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;DS.FixtureAdapter&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</summary>
    <content type="html">&lt;p&gt;本文共两篇文章，通过两种常见的方式实现了一个简单的用户管理。&lt;/p&gt;

&lt;p&gt;一种是采用跳转至一个新页面进行用户信息查看与修改；另一种是采用在同一个页面进行用户信息查看与修改。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;第一篇讲述使用第一种方案实现的过程。&lt;/h3&gt;
&lt;p&gt;首先是创建应用：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App = Ember.Application.create();


App.Store = DS.Store.extend({
    &lt;span class="key"&gt;revision&lt;/span&gt;: &lt;span class="integer"&gt;12&lt;/span&gt;,
    &lt;span class="key"&gt;adapter&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;DS.FixtureAdapter&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

App.User = DS.Model.extend({
    &lt;span class="key"&gt;name&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
    &lt;span class="key"&gt;email&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

App.User.FIXTURES = [
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user1@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user2&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user2@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user3@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;4&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user4&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user4@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user5&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user5@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
];
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义App的&lt;code&gt;template&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;    
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Users' example&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {{outlet}}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义&lt;code&gt;Router&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.map(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;path&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users/:user_id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;});
});

&lt;span class="comment"&gt;//默认跳转至`users`&lt;/span&gt;
App.IndexRoute = Ember.Route.extend({
    &lt;span class="function"&gt;redirect&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="local-variable"&gt;this&lt;/span&gt;.transitionTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，我们内容将会render到上面的&lt;code&gt;outlet&lt;/code&gt;内。&lt;/p&gt;

&lt;p&gt;之后，定义我们的&lt;code&gt;UsersRoute&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UsersRoute = Ember.Route.extend({
    &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="keyword"&gt;return&lt;/span&gt; App.User.find();
    }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;users&lt;/code&gt;模板：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Users&lt;span class="tag"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        {{#each controller}}
        &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{#linkTo 'user' this}}{{name}}{{/linkTo}}&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        {{/each}}
    &lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，就可以顺利地列出我们所有的&lt;code&gt;users&lt;/code&gt;了，上面的&lt;code&gt;linkTo&lt;/code&gt; helper就会为我们构造类似&lt;code&gt;#/users/2&lt;/code&gt;这样的url。&lt;/p&gt;

&lt;p&gt;开始&lt;code&gt;User&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因为&lt;a href="http://www.emberjs.com"&gt;Ember&lt;/a&gt;自动为我们构造了&lt;code&gt;UserRoute&lt;/code&gt;，并使用了默认的&lt;code&gt;model&lt;/code&gt;方法，因此，这里并不需要显示地定义&lt;code&gt;UserRoute&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;我们直接写我们的&lt;code&gt;template&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;User&lt;span class="tag"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;name: {{name}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;email: {{email}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {{&lt;span class="error"&gt;#&lt;/span&gt;linkTo &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;}}back{{&lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;linkTo}}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，我们就实现了在新页面打开具体user的方案。具体代码参见&lt;a href="http://jsfiddle.net/pudgecon/gbZBQ/3/"&gt;http://jsfiddle.net/pudgecon/gbZBQ/3/&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.cn/blog/2013/04/25/two-different-ways-for-users-management-2.html"&gt;方案二&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
