<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EmberJS.CN Blog</title>
  <subtitle>Ember JS相关新闻与资源</subtitle>
  <id>http://emberjs.cn/blog</id>
  <link href="http://emberjs.cn/blog"/>
  <link href="http://emberjs.cn/blog/feed.xml" rel="self"/>
  <updated>2013-05-09T00:00:00Z</updated>
  <author>
    <name>EmberJS.CN</name>
  </author>
  <entry>
    <title>第三期周报</title>
    <link rel="alternate" href="/blog/2013/05/09/ember-js-weekly.html"/>
    <id>/blog/2013/05/09/ember-js-weekly.html</id>
    <published>2013-05-09T00:00:00Z</published>
    <updated>2013-05-09T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-thesoftwaresimpleton-com-blog-2013-04-27-macro-ember-js-a'&gt;&lt;a href="http://www.thesoftwaresimpleton.com/blog/2013/04/27/macro/"&gt;在Ember.js中创建计算宏&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在定义计算属性的时候，经常会碰到多个属性需要编写大致相同的逻辑代码。通过计算宏，可以将这种重复降低到最低。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-jsonapi-org-ember-js-json-apis-a'&gt;&lt;a href="http://jsonapi.org"&gt;Ember.js JSON APIs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;详细介绍了JSON
APIs的两种不同风格（ID风格和URL风格）。ID风格简单易用，也是我们通常采用的风格，其问题在于需要客户端能够根据ID来猜测API的地址，这样会将服务端API的结构禁锢，当API变得庞大时，可能会导致问题。@wycats建议我们先从ID风格的入手，如果可能的话，再换成URL风格的。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-thesoftwaresimpleton-com-blog-2013-04-27-macro-ember-js-a'&gt;&lt;a href="http://www.thesoftwaresimpleton.com/blog/2013/04/27/macro/"&gt;在Ember.js中创建计算宏&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在定义计算属性的时候，经常会碰到多个属性需要编写大致相同的逻辑代码。通过计算宏，可以将这种重复降低到最低。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-jsonapi-org-ember-js-json-apis-a'&gt;&lt;a href="http://jsonapi.org"&gt;Ember.js JSON APIs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;详细介绍了JSON
APIs的两种不同风格（ID风格和URL风格）。ID风格简单易用，也是我们通常采用的风格，其问题在于需要客户端能够根据ID来猜测API的地址，这样会将服务端API的结构禁锢，当API变得庞大时，可能会导致问题。@wycats建议我们先从ID风格的入手，如果可能的话，再换成URL风格的。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-it-ebooks-info-book-2032-ember-js-application-development-how-to-a'&gt;&lt;a href="http://it-ebooks.info/book/2032/"&gt;Ember.js Application Development How-to&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本书通过一个实际的例子一步步为你介绍了如何开发一个Ember.js应用。另外，其中还包括了一些高级的关于Ember.js核心概念的例子，有助于你进一步扩展你对Ember.js的认识和技巧。感谢&lt;a href="http://discuss.emberjs.cn/users/inDream"&gt;@inDream&lt;/a&gt;分享！&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;视频&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-youtube-com-watch-v-i3vejbjv8sk-ember-listview-a'&gt;&lt;a href="http://www.youtube.com/watch?v=i3vEjbjV8Sk"&gt;Ember.ListView介绍&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本视频介绍了一个Ember.js的新控件 - Ember.ListView。列表视图是在开发应用过程中非常常用的一个控件。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;库、代码和工具&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-jamesarosen-ember-i18n-ember-i18n-a'&gt;&lt;a href="https://github.com/jamesarosen/ember-i18n"&gt;ember-i18n&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一个简单使用的国际化工具，可以让我们的Ember.js很容易的支持国际化。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-emberjs-ember-dev-ember-dev-a'&gt;&lt;a href="https://github.com/emberjs/ember-dev"&gt;ember-dev&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ember-dev是一个用于开发Ember.js扩展的一个辅助工具，&lt;a href="https://github.com/emberjs/data"&gt;ember-data&lt;/a&gt;便是基于ember-dev来构建的](https://github.com/emberjs/data)便是基于ember-dev来构建的。如果准备开发一个Ember.js的扩展，这将是你的不二之选。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>第二期周报</title>
    <link rel="alternate" href="/blog/2013/05/02/ember-js-weekly.html"/>
    <id>/blog/2013/05/02/ember-js-weekly.html</id>
    <published>2013-05-02T00:00:00Z</published>
    <updated>2013-05-02T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;em&gt;本期对周报的内容进行了一点小的调整，就是主要内容的标题如果是英文的对被翻译为中文。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-tech-pro-tutorial-1249-modern-emberjs-application-workflow-with-yeoman-and-mocha-yeoman-mocha-ember-js-a'&gt;&lt;a href="http://tech.pro/tutorial/1249/modern-emberjs-application-workflow-with-yeoman-and-mocha"&gt;运用Yeoman和Mocha的Ember.js应用开发工作流&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章介绍了如何使用&lt;code&gt;Yeoman&lt;/code&gt;来构建一个Ember.js应用。其中包括如何使用&lt;code&gt;Yeoman&lt;/code&gt;来创建一个应用结构，如何编译，如何运行和如何测试等。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;em&gt;本期对周报的内容进行了一点小的调整，就是主要内容的标题如果是英文的对被翻译为中文。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-tech-pro-tutorial-1249-modern-emberjs-application-workflow-with-yeoman-and-mocha-yeoman-mocha-ember-js-a'&gt;&lt;a href="http://tech.pro/tutorial/1249/modern-emberjs-application-workflow-with-yeoman-and-mocha"&gt;运用Yeoman和Mocha的Ember.js应用开发工作流&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;文章介绍了如何使用&lt;code&gt;Yeoman&lt;/code&gt;来构建一个Ember.js应用。其中包括如何使用&lt;code&gt;Yeoman&lt;/code&gt;来创建一个应用结构，如何编译，如何运行和如何测试等。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;视频&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-youtube-com-watch-v-obawh8xl2c0-ember-js-rss-a'&gt;&lt;a href="http://www.youtube.com/watch?v=obaWh8xL2C0"&gt;从零开始使用Ember.js构建RSS阅读器&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Gordon通过一个40分钟的视频，讲述了如何使用Ember.js从零开始来构建一个RSS阅读器。该阅读器实现的模型部分采用&lt;a href="https://github.com/emberjs/data"&gt;ember-data&lt;/a&gt;来实现。本视频可以帮助我们更深入的理解如何使用Ember.js去构建优秀的应用。&lt;a href="https://github.com/emberjs-seattle/ember-reader"&gt;示例代码下载&lt;/a&gt;&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-youtube-com-watch-v-no1hxt9gbts-ember-js-a'&gt;&lt;a href="http://www.youtube.com/watch?v=nO1hxT9GBTs"&gt;简单且快速的测试Ember.js应用&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Erik在视频中为我们介绍了如何使用&lt;a href="https://github.com/emberjs/ember.js/tree/master/packages/ember-testing"&gt;ember-testing&lt;/a&gt;对Ember.js应用进行验收测试。&lt;a href="https://github.com/emberjs/ember.js/tree/master/packages/ember-testing"&gt;ember-testing&lt;/a&gt;是Ember.js大家庭中新近加入的成员，旨在为我们提供一些列辅助测试的基础方法，方便我们为Ember.js应用编写测试。&lt;a href="https://github.com/ebryn/bloggr-client-rails/blob/master/test/javascripts/integration/bloggr_test.js"&gt;查看演示代码&lt;/a&gt;&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;库、代码和工具&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-stefanpenner-ember-inflector-ember-inflector-a'&gt;&lt;a href="https://github.com/stefanpenner/ember-inflector"&gt;ember-inflector&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;提供一个与rails兼容的inflector，参见&lt;a href="http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html"&gt;ActiveSupport::Inflector&lt;/a&gt;。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-addepar-ember-table-ember-table-a'&gt;&lt;a href="https://github.com/Addepar/ember-table"&gt;ember-table&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;表格是每个应用的核心控件之一，ember-table是一个非常优秀的采用Ember.js实现的表格控件。它几乎涵盖了大部分的应用场景，包括按列排序、树状表、Ajax加载、可编辑的单元格等等。&lt;a href="http://addepar.github.io/ember-table/"&gt;在线演示&lt;/a&gt;&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-heartsentwined-ember-auth-ember-auth-a'&gt;&lt;a href="https://github.com/heartsentwined/ember-auth"&gt;ember-auth&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/heartsentwined/ember-auth"&gt;ember-auth&lt;/a&gt;是一个基于token进行身份验证的库，它假定服务器端实现了基于token的身份验证。它将在登录成功后从服务器获取token，并在之后所有的针对模型的查询和持久化的操作上附加该token。在用户注销时销毁该token。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>两种方式实现用户管理(二)</title>
    <link rel="alternate" href="/blog/2013/04/25/two-different-ways-for-users-management-2.html"/>
    <id>/blog/2013/04/25/two-different-ways-for-users-management-2.html</id>
    <published>2013-04-25T00:00:00Z</published>
    <updated>2013-04-25T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;本文通过两种常见的方式实现了一个简单的用户管理。&lt;/p&gt;

&lt;p&gt;一种是采用跳转至一个新页面进行用户信息查看与修改；另一种是采用在同一个页面进行用户信息查看与修改。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.cn/blog/2013/04/25/two-different-ways-for-users-management-1.html"&gt;上一篇&lt;/a&gt;讲述使用第一种方案实现的过程。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;这一篇讲述使用第二种方案实现的过程。&lt;/h3&gt;
&lt;p&gt;首先是相同的创建应用：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App = Ember.Application.create();
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</summary>
    <content type="html">&lt;p&gt;本文通过两种常见的方式实现了一个简单的用户管理。&lt;/p&gt;

&lt;p&gt;一种是采用跳转至一个新页面进行用户信息查看与修改；另一种是采用在同一个页面进行用户信息查看与修改。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.cn/blog/2013/04/25/two-different-ways-for-users-management-1.html"&gt;上一篇&lt;/a&gt;讲述使用第一种方案实现的过程。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;这一篇讲述使用第二种方案实现的过程。&lt;/h3&gt;
&lt;p&gt;首先是相同的创建应用：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App = Ember.Application.create();


App.Store = DS.Store.extend({
    &lt;span class="key"&gt;revision&lt;/span&gt;: &lt;span class="integer"&gt;12&lt;/span&gt;,
    &lt;span class="key"&gt;adapter&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;DS.FixtureAdapter&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

App.User = DS.Model.extend({
    &lt;span class="key"&gt;name&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
    &lt;span class="key"&gt;email&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

App.User.FIXTURES = [
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user1@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user2&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user2@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user3@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;4&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user4&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user4@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user5&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user5@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
];
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义App的&lt;code&gt;template&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;    
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Users' example&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {{outlet}}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义&lt;code&gt;Router&lt;/code&gt;，这里与方案一中稍有不同：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.map(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;path&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;:user_id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; });
    });
});

App.IndexRoute = Ember.Route.extend({
    &lt;span class="function"&gt;redirect&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="local-variable"&gt;this&lt;/span&gt;.transitionTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义&lt;code&gt;UsersRoute&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UsersRoute = Ember.Route.extend({
    &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="keyword"&gt;return&lt;/span&gt; App.User.find();
    }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;users&lt;/code&gt;模板：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;list&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            {{#each controller}}
            &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{#linkTo 'user' this}}{{name}}{{/linkTo}}&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {{else}}
            &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;no users yet...&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {{/each}}
        &lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，就可以顺利地列出我们所有的&lt;code&gt;users&lt;/code&gt;了，上面的&lt;code&gt;linkTo&lt;/code&gt; helper就会为我们构造类似&lt;code&gt;#/users/2&lt;/code&gt;这样的url。&lt;/p&gt;

&lt;p&gt;开始&lt;code&gt;User&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;同样的，&lt;a href="http://www.emberjs.com"&gt;Ember&lt;/a&gt;自动为我们构造了&lt;code&gt;UserRoute&lt;/code&gt;，并使用了默认的&lt;code&gt;model&lt;/code&gt;方法，因此，这里并不需要显示地定义&lt;code&gt;UserRoute&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;定义&lt;code&gt;user&lt;/code&gt;的&lt;code&gt;template&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;name: {{name}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;email: {{email}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;但是此时，若我们点击user的链接，会发现页面并没有出现我们想要的user信息，这是因为Ember虽然render了我们user的模板，但是并不知道需要将它显示在页面的什么地方，因此，我们需要在我们的&lt;code&gt;users&lt;/code&gt;模板添加一个&lt;code&gt;outlet&lt;/code&gt;，Ember会自动将&lt;code&gt;user&lt;/code&gt; &lt;code&gt;render&lt;/code&gt;到此处。&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;list&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            {{#each controller}}
            &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{#linkTo 'user' this}}{{name}}{{/linkTo}}&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {{else}}
            &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;no users yet...&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            {{/each}}
        &lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="attribute-name"&gt;class&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;detail&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;{{outlet}}&lt;span class="tag"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这段代码的第11行，就是我们新添加的一个outlet。&lt;/p&gt;

&lt;p&gt;这样，其实我们就已经完成了在页面的另一区域显示我们点击的user的信息，后面我们可以给它添加一些常用的操作，比如说，修改操作。&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    {{&lt;span class="error"&gt;#&lt;/span&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; view.isEditing}}
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;name: {{view Ember.TextField valueBinding=&amp;quot;name&amp;quot; target=&amp;quot;view&amp;quot;}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;email: {{view Ember.TextField valueBinding=&amp;quot;email&amp;quot; target=&amp;quot;view&amp;quot;}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;button&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="error"&gt;{&lt;/span&gt;&lt;span class="error"&gt;{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;finishEdit&lt;/span&gt;&lt;span class="error"&gt;}&lt;/span&gt;&lt;span class="error"&gt;}&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Save&lt;span class="tag"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    {{&lt;span class="keyword"&gt;else&lt;/span&gt;}}
    &lt;span class="tag"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;button&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="error"&gt;{&lt;/span&gt;&lt;span class="error"&gt;{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;edit&lt;/span&gt;&lt;span class="error"&gt;}&lt;/span&gt;&lt;span class="error"&gt;}&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;Edit&lt;span class="tag"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    {{&lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;if}}
    &amp;lt;p&amp;gt;name: {{name}}&amp;lt;&lt;/span&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;/span&gt;p&amp;gt;
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;email: {{email}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这段是修改过的&lt;code&gt;template&lt;/code&gt;，默认情况下，我们显示一个&lt;code&gt;Edit&lt;/code&gt;按钮，当我们点击它时，切换到编辑模式，同时显示一个保存按钮。&lt;/p&gt;

&lt;p&gt;同时，细心的你可以会发现，Ember自动为我们对应的user的链接添加了一个&lt;code&gt;.active&lt;/code&gt;的样式。因此我们只需要额外提供一个&lt;code&gt;.active&lt;/code&gt;样式就可以实现选中效果了。&lt;/p&gt;

&lt;p&gt;这里我们通过&lt;code&gt;{{#if
isEditing}}&lt;/code&gt;这个helper来判断当前是否处在编辑模式，并使用Ember提供的TextField，将它与对应的&lt;code&gt;attribute&lt;/code&gt;绑定（&lt;code&gt;valueBinding&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;我们将这个方法放在&lt;code&gt;UserView&lt;/code&gt;内&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UserView = Ember.View.extend({
    &lt;span class="key"&gt;isEditing&lt;/span&gt;: &lt;span class="predefined-constant"&gt;false&lt;/span&gt;,

    &lt;span class="function"&gt;edit&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isEditing&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;true&lt;/span&gt;);
    },
    &lt;span class="function"&gt;finishEdit&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;isEditing&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="predefined-constant"&gt;false&lt;/span&gt;);
        &lt;span class="comment"&gt;//this.get('controller.model.transaction').commit();&lt;/span&gt;
    }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，当&lt;code&gt;UserView&lt;/code&gt;的&lt;code&gt;isEditing&lt;/code&gt;变化时，Ember会自动为我们重新render页面。&lt;/p&gt;

&lt;p&gt;这里将这个变量放在&lt;code&gt;UserView&lt;/code&gt;而不是放在&lt;code&gt;UserController&lt;/code&gt;内的原因主要是，放在&lt;code&gt;UserController&lt;/code&gt;内，当我们在一个user下处于编辑状态时，当我们点击到另外一个user，需要手动地将controller的&lt;code&gt;isEditing&lt;/code&gt;置为&lt;code&gt;false&lt;/code&gt;，否则将会出现点击直接出现编辑界面的情况。而在&lt;code&gt;方案一&lt;/code&gt;中，这种情况就不一样了，就可以放在&lt;code&gt;UserController&lt;/code&gt;内了。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;总结&lt;/h3&gt;
&lt;p&gt;方案一与方案二的区别在于方案二采用的是嵌套的路由与嵌套的视图，因此大家会发现方案一中的&lt;code&gt;App.Router&lt;/code&gt;与方案二是不一样的。&lt;/p&gt;

&lt;p&gt;自己来尝试一下吧！！！&lt;/p&gt;

&lt;p&gt;方案二示例：&lt;a href="http://jsfiddle.net/pudgecon/gZeN2/5/"&gt;http://jsfiddle.net/pudgecon/gZeN2/5/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>两种方式实现用户管理(一)</title>
    <link rel="alternate" href="/blog/2013/04/25/two-different-ways-for-users-management-1.html"/>
    <id>/blog/2013/04/25/two-different-ways-for-users-management-1.html</id>
    <published>2013-04-25T00:00:00Z</published>
    <updated>2013-04-25T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;本文共两篇文章，通过两种常见的方式实现了一个简单的用户管理。&lt;/p&gt;

&lt;p&gt;一种是采用跳转至一个新页面进行用户信息查看与修改；另一种是采用在同一个页面进行用户信息查看与修改。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;第一篇讲述使用第一种方案实现的过程。&lt;/h3&gt;
&lt;p&gt;首先是创建应用：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App = Ember.Application.create();


App.Store = DS.Store.extend({
    &lt;span class="key"&gt;revision&lt;/span&gt;: &lt;span class="integer"&gt;12&lt;/span&gt;,
    &lt;span class="key"&gt;adapter&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;DS.FixtureAdapter&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</summary>
    <content type="html">&lt;p&gt;本文共两篇文章，通过两种常见的方式实现了一个简单的用户管理。&lt;/p&gt;

&lt;p&gt;一种是采用跳转至一个新页面进行用户信息查看与修改；另一种是采用在同一个页面进行用户信息查看与修改。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;第一篇讲述使用第一种方案实现的过程。&lt;/h3&gt;
&lt;p&gt;首先是创建应用：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
12
13
14
15
16
17
18
19
&lt;strong&gt;20&lt;/strong&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App = Ember.Application.create();


App.Store = DS.Store.extend({
    &lt;span class="key"&gt;revision&lt;/span&gt;: &lt;span class="integer"&gt;12&lt;/span&gt;,
    &lt;span class="key"&gt;adapter&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;DS.FixtureAdapter&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;
});

App.User = DS.Model.extend({
    &lt;span class="key"&gt;name&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;),
    &lt;span class="key"&gt;email&lt;/span&gt;: DS.attr(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;string&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;)
});

App.User.FIXTURES = [
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;1&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user1&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user1@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;2&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user2&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user2@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;3&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user3&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user3@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;4&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user4&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user4@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; },
    { &lt;span class="key"&gt;id&lt;/span&gt;: &lt;span class="integer"&gt;5&lt;/span&gt;, &lt;span class="key"&gt;name&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user5&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="key"&gt;email&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user5@example.com&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt; }
];
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义App的&lt;code&gt;template&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;    
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Users' example&lt;span class="tag"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    {{outlet}}&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义&lt;code&gt;Router&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;strong&gt;10&lt;/strong&gt;
11
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.Router.map(&lt;span class="keyword"&gt;function&lt;/span&gt;() {
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.resource(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, { &lt;span class="key"&gt;path&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users/:user_id&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;});
});

&lt;span class="comment"&gt;//默认跳转至`users`&lt;/span&gt;
App.IndexRoute = Ember.Route.extend({
    &lt;span class="function"&gt;redirect&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="local-variable"&gt;this&lt;/span&gt;.transitionTo(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;);
    }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，我们内容将会render到上面的&lt;code&gt;outlet&lt;/code&gt;内。&lt;/p&gt;

&lt;p&gt;之后，定义我们的&lt;code&gt;UsersRoute&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.UsersRoute = Ember.Route.extend({
    &lt;span class="function"&gt;model&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;() {
        &lt;span class="keyword"&gt;return&lt;/span&gt; App.User.find();
    }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;users&lt;/code&gt;模板：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Users&lt;span class="tag"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        {{#each controller}}
        &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{#linkTo 'user' this}}{{name}}{{/linkTo}}&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        {{/each}}
    &lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，就可以顺利地列出我们所有的&lt;code&gt;users&lt;/code&gt;了，上面的&lt;code&gt;linkTo&lt;/code&gt; helper就会为我们构造类似&lt;code&gt;#/users/2&lt;/code&gt;这样的url。&lt;/p&gt;

&lt;p&gt;开始&lt;code&gt;User&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因为&lt;a href="http://www.emberjs.com"&gt;Ember&lt;/a&gt;自动为我们构造了&lt;code&gt;UserRoute&lt;/code&gt;，并使用了默认的&lt;code&gt;model&lt;/code&gt;方法，因此，这里并不需要显示地定义&lt;code&gt;UserRoute&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;我们直接写我们的&lt;code&gt;template&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight html "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="tag"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;text/x-handlebars&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;data-template-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;user&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;    &lt;span class="tag"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;User&lt;span class="tag"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;name: {{name}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="tag"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;email: {{email}}&lt;span class="tag"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    {{&lt;span class="error"&gt;#&lt;/span&gt;linkTo &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;users&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;}}back{{&lt;span class="regexp"&gt;&lt;span class="delimiter"&gt;/&lt;/span&gt;&lt;span class="content"&gt;linkTo}}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，我们就实现了在新页面打开具体user的方案。具体代码参见&lt;a href="http://jsfiddle.net/pudgecon/gbZBQ/3/"&gt;http://jsfiddle.net/pudgecon/gbZBQ/3/&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://emberjs.cn/blog/2013/04/25/two-different-ways-for-users-management-2.html"&gt;方案二&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>第一期周报</title>
    <link rel="alternate" href="/blog/2013/04/25/ember-js-weekly.html"/>
    <id>/blog/2013/04/25/ember-js-weekly.html</id>
    <published>2013-04-25T00:00:00Z</published>
    <updated>2013-04-25T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;各位朋友大家好，本站计划从本周开始，对Ember.js社区里面每周发生的大事、小事、琐事进行收集与报道，希望大家喜欢。另外，欢迎大家给我们提出宝贵的意见，并踊跃参与投稿。投稿地址为论坛的分享版块：&lt;a href="http://discuss.emberjs.cn/category/4-category"&gt;http://discuss.emberjs.cn/category/4-category&lt;/a&gt;。谢谢！&lt;/p&gt;

&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-mcdowall-info-posts-ember-application-initializers-ember-application-initializers-a'&gt;&lt;a href="http://mcdowall.info/posts/ember-application-initializers/"&gt;EMBER APPLICATION INITIALIZERS&lt;/a&gt;&lt;/h4&gt;</summary>
    <content type="html">&lt;p&gt;各位朋友大家好，本站计划从本周开始，对Ember.js社区里面每周发生的大事、小事、琐事进行收集与报道，希望大家喜欢。另外，欢迎大家给我们提出宝贵的意见，并踊跃参与投稿。投稿地址为论坛的分享版块：&lt;a href="http://discuss.emberjs.cn/category/4-category"&gt;http://discuss.emberjs.cn/category/4-category&lt;/a&gt;。谢谢！&lt;/p&gt;

&lt;p&gt;本周Ember.js热点：&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;读物&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-mcdowall-info-posts-ember-application-initializers-ember-application-initializers-a'&gt;&lt;a href="http://mcdowall.info/posts/ember-application-initializers/"&gt;EMBER APPLICATION INITIALIZERS&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ember应用初始化程序提供了一个入口，帮助我们在Ember应用初始化的时候执行一些特定的代码，完成一些特定的初始化工作。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-sporto-github-io-blog-2013-04-12-comparison-angular-backbone-can-ember-a-comparison-of-angular-backbone-canjs-and-ember-a'&gt;&lt;a href="http://sporto.github.io/blog/2013/04/12/comparison-angular-backbone-can-ember/"&gt;A Comparison of Angular, Backbone, CanJS and Ember&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在开发一个Web应用的时候选择什么框架来构建你的Web应用通常是一件非常让人头疼的事情，这不仅仅是因为需要考虑太多方面的因素，另外一个重要的原因是社区提供了太多太多的选择。本文的作者从自己的切身体会，从功能、灵活性、学习曲线、开发效率、社区、生态系统、库大小、性能、成熟度、内存泄露安全性和可测试性方面对Angular、Backbone、CanJS和Ember.js进行了比较。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-net-tutsplus-com-tutorials-javascript-ajax-getting-into-ember-js-part-3-getting-into-ember-js-part-3-a'&gt;&lt;a href="http://net.tutsplus.com/tutorials/javascript-ajax/getting-into-ember-js-part-3/"&gt;Getting Into Ember.js: Part 3&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;本文作为Ember.js入门文章的第三部分，重点介绍了如何实现Model层，为Ember.js应用提供数据。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-emberjs-cn-blog-2013-04-23-ember-js-1-0-0-rc3-html-ember-js-1-0-0-rc-3-released-a'&gt;&lt;a href="http://emberjs.cn/blog/2013/04/23/ember-js-1-0-0-rc3.html"&gt;Ember.js 1.0.0-RC.3 Released&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ember.js 1.0.0-RC.3发布，本次发布大大改进了Ember.js的性能，另外也修复了一些Bugs和文档，变得更加稳定。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;视频&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-http-www-tudou-com-programs-view-hvte3-neypg-building-ambitious-web-applications-with-ember-js-a'&gt;&lt;a href="http://www.tudou.com/programs/view/HvtE3-nEyPg/"&gt;Building Ambitious Web Applications with Ember.js&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一个由Ember.js核心团队成员Yehuda
Katz主讲的全面介绍如何用Ember.js来开发优秀的Web应用的视频。视频中介绍了什么是Ember.js，并且提供了给出了一个示例，还介绍了Web应用的未来发展趋势。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-http-toranbillups-com-blog-archive-2013-03-02-emberjs-rc1-introduction-screencast-ember-js-rc1-introduction-screencast-a'&gt;&lt;a href="http://toranbillups.com/blog/archive/2013/03/02/emberjs-rc1-introduction-screencast/"&gt;Ember.js RC1 introduction screencast&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ember.js应用开发的一个入门级视频指南，视频中详细的介绍了如果构建一个简单的Web应用，并且详细的阐述了Ember.js默认情况下为我自动化处理了哪些逻辑。另外，还介绍了如何使用&lt;a href="https://github.com/emberjs/data"&gt;Ember Data&lt;/a&gt;来与服务器端进行交互。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;库、代码和工具&lt;/h3&gt;&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-rpflorence-ember-tools-ember-tools-a'&gt;&lt;a href="https://github.com/rpflorence/ember-tools"&gt;ember-tools&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ember应用的构建辅助工具，可以用来自动化为你创建Ember应用的目录接口，并且提供代码生成器来为你生成应用代码。&lt;/p&gt;
&lt;h4 class='anchorable-toc' id='toc_a-href-https-github-com-myslik-ember-grid-ember-grid-a'&gt;&lt;a href="https://github.com/Myslik/ember-grid"&gt;ember-grid&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/Myslik/ember-grid"&gt;ember-grid&lt;/a&gt;一个基于jQuery、Twitter Bootstrap、Handlebars和Ember.js的优秀的Grid库，ember-grid支持分页、按列排序、过滤、指定显示的列和格式化特性。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js 1.0.0-rc3发布</title>
    <link rel="alternate" href="/blog/2013/04/23/ember-js-1-0-0-rc3.html"/>
    <id>/blog/2013/04/23/ember-js-1-0-0-rc3.html</id>
    <published>2013-04-23T00:00:00Z</published>
    <updated>2013-04-23T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;code&gt;Ember.js&lt;/code&gt;
1.0.0-rc3发布了。正如在发布rc1时曾经提到过的那样，在1.0版本结束之前的所有版本都只会做bug修复和代码完善，不会有其他重大变化。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;性能&lt;/h3&gt;
&lt;p&gt;自RC2以来，Embe.js改善了一系列性能问题。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当相关联的多个子视图准备做插入时，不再像以前那样一个一个添加，而是批量插入。&lt;/li&gt;
&lt;li&gt;删除对象改成异步操作，这样做可以保证在删除一个对象的时候，与其相关联的对象不会出现不必要的扰动。&lt;/li&gt;
&lt;li&gt;减少了在视图渲染时分配的对象的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;测试&lt;/h3&gt;
&lt;p&gt;为&lt;code&gt;App#reset&lt;/code&gt;做了大量的修复以及改善工作，现在，当它被调用的时候，应该会正确的清理应用程序状态。通常情况下，这只用于集成测试。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;code&gt;Ember.js&lt;/code&gt;
1.0.0-rc3发布了。正如在发布rc1时曾经提到过的那样，在1.0版本结束之前的所有版本都只会做bug修复和代码完善，不会有其他重大变化。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;性能&lt;/h3&gt;
&lt;p&gt;自RC2以来，Embe.js改善了一系列性能问题。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当相关联的多个子视图准备做插入时，不再像以前那样一个一个添加，而是批量插入。&lt;/li&gt;
&lt;li&gt;删除对象改成异步操作，这样做可以保证在删除一个对象的时候，与其相关联的对象不会出现不必要的扰动。&lt;/li&gt;
&lt;li&gt;减少了在视图渲染时分配的对象的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;测试&lt;/h3&gt;
&lt;p&gt;为&lt;code&gt;App#reset&lt;/code&gt;做了大量的修复以及改善工作，现在，当它被调用的时候，应该会正确的清理应用程序状态。通常情况下，这只用于集成测试。&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;//before each integration test&lt;/span&gt;
App.reset();
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;请注意：现在
&lt;code&gt;App.reset()&lt;/code&gt;本身包含了一个&lt;code&gt;run&lt;/code&gt;循环，不需要在再外部套一个&lt;code&gt;run&lt;/code&gt;循环了。&lt;/p&gt;

&lt;p&gt;创建了&lt;a href="https://github.com/emberjs/ember.js/tree/master/packages/ember-testing"&gt;ember-testing&lt;/a&gt;。这个项目的目的是使测试&lt;code&gt;Ember&lt;/code&gt;应用程序更简单，尤其是在需要测试异步性的情况下。随着工作日渐成熟，会给出完整的文档，例子以及指南。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_code-ember-code'&gt;&lt;code&gt;Ember&lt;/code&gt;构建&lt;/h3&gt;
&lt;p&gt;每一个成功的&lt;a href="https://travis-ci.org/emberjs/ember.js"&gt;CI&lt;/a&gt;都会把结果发布到&lt;a href="http://builds.emberjs.com/"&gt;http://builds.emberjs.com/&lt;/a&gt;。这会使引用及使用&lt;a href="http://builds.emberjs.com/ember-latest.js"&gt;最新的&lt;code&gt;Ember&lt;/code&gt;构建&lt;/a&gt;更简单。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_code-input-code-code-textarea-code'&gt;新的&lt;code&gt;{{input}}&lt;/code&gt;和&lt;code&gt;{{textarea}}&lt;/code&gt;助手&lt;/h3&gt;
&lt;p&gt;现在，&lt;code&gt;TextField&lt;/code&gt;,&lt;code&gt;TextArea&lt;/code&gt;和&lt;code&gt;Checkbox&lt;/code&gt;也有相应的&lt;code&gt;Ember&lt;/code&gt;助手了。&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextField&lt;/span&gt; &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.Checkbox&lt;/span&gt;  &lt;span class="attribute-name"&gt;checkedBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;isActive&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;view&lt;/span&gt; &lt;span class="attribute-name"&gt;Ember.TextArea&lt;/span&gt;  &lt;span class="attribute-name"&gt;valueBinding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;span class="content"&gt;name&lt;/span&gt;&lt;span class="delimiter"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以像下面这样写了&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;div class="scroller"&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;value&lt;/span&gt;=&lt;span class="attribute-value"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;input&lt;/span&gt; &lt;span class="attribute-name"&gt;type&lt;/span&gt;=&lt;span class="attribute-value"&gt;checkbox&lt;/span&gt; &lt;span class="attribute-name"&gt;checked&lt;/span&gt;=&lt;span class="attribute-value"&gt;isActive&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;textarea&lt;/span&gt; &lt;span class="attribute-name"&gt;value&lt;/span&gt;=&lt;span class="attribute-value"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;推荐使用&lt;code&gt;动态标签&lt;/code&gt;而不是&lt;code&gt;{{view}}&lt;/code&gt;助手，因为他们等价于静态标签，而静态标签被大家熟知和喜爱。&lt;/p&gt;

&lt;p&gt;要注意的是使用动态标签时，不需要使用&lt;code&gt;Binding&lt;/code&gt;后缀，也不需要为值添加引号。在这里，&lt;code&gt;Ember&lt;/code&gt;将把常量字符串视为静态字符串。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;文档&lt;/h3&gt;
&lt;p&gt;对API文档进行了精炼和补充，在这期间，很多社区成员提供了帮助。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;变更记录：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果不需要&lt;code&gt;thisArg&lt;/code&gt;的话，那么也不需要执行&lt;code&gt;fn.call&lt;/code&gt;了。&lt;/li&gt;
&lt;li&gt;不再需要交叉构建&lt;code&gt;insertViewCollection&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;LinkView&lt;/code&gt;中没有使用&lt;code&gt;a&lt;/code&gt;标签，那么将不能使用&lt;code&gt;href&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;修改了{{linkTo}}文档。&lt;/li&gt;
&lt;li&gt;在完整的构建代码中增添了&lt;code&gt;ember-testing&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;针对Opera，将&lt;code&gt;jQuery.js(&amp;#39;:disabled&amp;#39;)&lt;/code&gt;修改为&lt;code&gt;jQuery.js(&amp;#39;:disabled&amp;#39;).length&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;移除声明却未使用的变量。&lt;/li&gt;
&lt;li&gt;增添&lt;code&gt;run.scheduleOnce&lt;/code&gt;文档，删除&lt;code&gt;run.once&lt;/code&gt;文档。Fixes #2132。&lt;/li&gt;
&lt;li&gt;修复&lt;code&gt;outerHTML&lt;/code&gt;回退的测试。&lt;/li&gt;
&lt;li&gt;不再依赖&lt;code&gt;EXTEND_PROTOTYPES == true&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;修复&lt;code&gt;Ember.EnumerableUtils&lt;/code&gt;没有继承&lt;code&gt;prototypes&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;不对文档标记&lt;code&gt;.generateController&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;不为&lt;code&gt;.cachable&lt;/code&gt;构建文档。Fixes #2329。&lt;/li&gt;
&lt;li&gt;清理&lt;code&gt;MutableEnumerable&lt;/code&gt;文档。&lt;/li&gt;
&lt;li&gt;新增&lt;code&gt;Ember.Application#removeTestHelpers&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;修复几个有争议的问题。&lt;/li&gt;
&lt;li&gt;首次通过了&lt;code&gt;ember-testing&lt;/code&gt;包的工作。&lt;/li&gt;
&lt;li&gt;修复&amp;#39;自定义绑定&amp;#39;部分的文档错误。&lt;/li&gt;
&lt;li&gt;修复方法注释bug。&lt;/li&gt;
&lt;li&gt;修复重定向到子路由bug。&lt;/li&gt;
&lt;li&gt;修复&lt;code&gt;MetamorphView&lt;/code&gt;的&lt;code&gt;DOMManager&lt;/code&gt; replace。&lt;/li&gt;
&lt;li&gt;修复#870延迟析构以及&lt;code&gt;App#reset&lt;/code&gt;问题。&lt;/li&gt;
&lt;li&gt;清除无用变量。&lt;/li&gt;
&lt;li&gt;使用最新的&lt;code&gt;Ember&lt;/code&gt;构建更新&lt;code&gt;JSFiddle/JSBin&lt;/code&gt;的入口点配置。最新的构建已经自动上传到&lt;code&gt;builds.emberjs.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;修复#22388: 为&lt;code&gt;_resetSubControllers&lt;/code&gt;添加&lt;code&gt;if&lt;/code&gt;语句。&lt;/li&gt;
&lt;li&gt;将缓存的状态转换哈希值作用域限定到状态管理器类，因此状态管理器的继承和混合行为与预期的保持一致了。&lt;/li&gt;
&lt;li&gt;修复发行版本构建的上载。&lt;/li&gt;
&lt;li&gt;更新到最新的&lt;code&gt;ember-dev&lt;/code&gt;以便发行任务可以正常工作。&lt;/li&gt;
&lt;li&gt;配置&lt;code&gt;Travis&lt;/code&gt;以便能自动部署到&lt;code&gt;AWS&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;新增漏掉的条目类型。&lt;/li&gt;
&lt;li&gt;在测试时不产生&lt;code&gt;Ember.alias&lt;/code&gt;废除警告。&lt;/li&gt;
&lt;li&gt;对&lt;code&gt;ViewCollection&lt;/code&gt;新增&lt;code&gt;invokeRecursively&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;失败的测试显示使用&lt;code&gt;mixins&lt;/code&gt;获取状态的&lt;code&gt;StateManager&lt;/code&gt;有未知行为。&lt;/li&gt;
&lt;li&gt;修复&lt;code&gt;HistoryLocation&lt;/code&gt;的&lt;code&gt;rootURL&lt;/code&gt;处理器及webkit方案。&lt;/li&gt;
&lt;li&gt;清除助手函数中的无用参数。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;toArray&lt;/code&gt;移除副本。&lt;/li&gt;
&lt;li&gt;允许了&lt;code&gt;option&lt;/code&gt;视图以便可以重写&lt;code&gt;Ember.Select&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;真正的使&lt;code&gt;Ember.alias()&lt;/code&gt;输出弃用警告。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Ember.String.fmt&lt;/code&gt;代替&lt;code&gt;String&lt;/code&gt;扩展。&lt;/li&gt;
&lt;li&gt;自动上载所有通过的构建到s3。&lt;/li&gt;
&lt;li&gt;修复#2424 App#reset。&lt;/li&gt;
&lt;li&gt;s/nexts/these（nexts不是单词)。&lt;/li&gt;
&lt;li&gt;针对&lt;code&gt;linkTo&lt;/code&gt;路由提供更多更详细的错误信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;viewName&lt;/code&gt;成为属性。&lt;/li&gt;
&lt;li&gt;清除不需要的闭包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSDoc&lt;/code&gt;应该对混合类型使用{*}而不是{anything}或者{any}。&lt;/li&gt;
&lt;li&gt;给&lt;code&gt;invokeRecursively&lt;/code&gt;增加一个&lt;code&gt;includeSelf&lt;/code&gt;参数。&lt;/li&gt;
&lt;li&gt;修复ArrayController#length在其content没有显示设置的问题。&lt;/li&gt;
&lt;li&gt;关闭#2043 - 修复在集合中删除最后元素的问题。&lt;/li&gt;
&lt;li&gt;阻止应用程序模板复制时被二次渲染。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;mixins&lt;/code&gt;被传递给&lt;code&gt;Object.create&lt;/code&gt;时提供断言。&lt;/li&gt;
&lt;li&gt;增强&lt;code&gt;Ember.TargetActionSupport&lt;/code&gt;并引入&lt;code&gt;Ember.ViewTargetActionSupport&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;修复{{textarea}}断言信息。&lt;/li&gt;
&lt;li&gt;测试unwatch方法的&lt;code&gt;length&lt;/code&gt;属性。&lt;/li&gt;
&lt;li&gt;测试watch方法的&lt;code&gt;length&lt;/code&gt;属性。&lt;/li&gt;
&lt;li&gt;测试iswatching方法的&lt;code&gt;length&lt;/code&gt;属性。&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;Ember.typeof&lt;/code&gt;移动到metal。&lt;/li&gt;
&lt;li&gt;修复数组watching问题。由于&lt;code&gt;typeof&lt;/code&gt;和&lt;code&gt;isArray&lt;/code&gt;的差异，曾经不止影响普通数组。&lt;/li&gt;
&lt;li&gt;移除提到的将&lt;code&gt;mixins&lt;/code&gt;传递给create。&lt;/li&gt;
&lt;li&gt;还原&lt;code&gt;Fix Application#reset destroy&lt;/code&gt;问题。&lt;/li&gt;
&lt;li&gt;修复视图助手文档和例子以便反映上下文。&lt;/li&gt;
&lt;li&gt;在命名空间查找阶段忽略&lt;code&gt;webkitStorageInfo&lt;/code&gt;以消除警告。&lt;/li&gt;
&lt;li&gt;修复&lt;code&gt;Fix Application#reset destroy&lt;/code&gt;问题。&lt;/li&gt;
&lt;li&gt;使Chrome的初始栈状态环境指导&lt;code&gt;rootURL&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;RenderBuffer&lt;/code&gt;中，使用字符串代替数组。&lt;/li&gt;
&lt;li&gt;将循环中的for语句转化为一个简单的for循环。&lt;/li&gt;
&lt;li&gt;改善视图容器的查找性能。&lt;/li&gt;
&lt;li&gt;清除&lt;code&gt;Ember.Deferred&lt;/code&gt;测试中的无用的异步性代码。&lt;/li&gt;
&lt;li&gt;清除路由测试中的无用的异步性代码。&lt;/li&gt;
&lt;li&gt;增加{{text area}}。&lt;/li&gt;
&lt;li&gt;为&lt;code&gt;enter&lt;/code&gt;提供默认的&lt;code&gt;text&lt;/code&gt; &lt;code&gt;input&lt;/code&gt; &lt;code&gt;action&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;增加{{input action=&amp;quot;foo&amp;quot; on=&amp;quot;keyPress&amp;quot;}}。&lt;/li&gt;
&lt;li&gt;清除更多metal。&lt;/li&gt;
&lt;li&gt;更好的组织&lt;code&gt;ember-metal&lt;/code&gt;和缓存函数查找表。&lt;/li&gt;
&lt;li&gt;移除从渲染到缓存的同步性。&lt;/li&gt;
&lt;li&gt;使测试不依赖于同步改变的事件。&lt;/li&gt;
&lt;li&gt;修复测试以便不期待同步的观察者。&lt;/li&gt;
&lt;li&gt;在原型中定义&lt;code&gt;Minix&lt;/code&gt;属性。&lt;/li&gt;
&lt;li&gt;更新&lt;code&gt;ember-dev&lt;/code&gt;gem到最新版本。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Ember.View&lt;/code&gt;原型中共享空数组。根据操作来区分。&lt;/li&gt;
&lt;li&gt;根据DOM中的insertion来添加views到&lt;code&gt;Ember.View.views&lt;/code&gt;,而不依赖初始化。Fixs #1553。&lt;/li&gt;
&lt;li&gt;使对象的异步析构以便在处理相互联系的对象时减少扰动。&lt;/li&gt;
&lt;li&gt;定义Ember.CoreObject#willDestroy. Fixes #1438。&lt;/li&gt;
&lt;li&gt;清除不需要的volatile()。&lt;/li&gt;
&lt;li&gt;匹配transitionTo APIs。&lt;/li&gt;
&lt;li&gt;避免递归调用transitionTo。&lt;/li&gt;
&lt;li&gt;改善视图通知及转换性能。&lt;/li&gt;
&lt;li&gt;提取一个私有的&lt;code&gt;ViewCollection&lt;/code&gt;辅助类来使同时处理多个视图成为可能。&lt;/li&gt;
&lt;li&gt;为{{input type=&amp;quot;checkbox&amp;quot;}}增加支持。&lt;/li&gt;
&lt;li&gt;增加&lt;code&gt;Ember.Handlebars.helper&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;增加{{input type=&amp;quot;text&amp;quot;}}。&lt;/li&gt;
&lt;li&gt;批量插入相关联的子视图而不是一个一个的添加。&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
