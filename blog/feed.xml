<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EmberJS.CN Blog</title>
  <subtitle>Ember JS相关新闻与资源</subtitle>
  <id>http://emberjs.cn/blog</id>
  <link href="http://emberjs.cn/blog"/>
  <link href="http://emberjs.cn/blog/feed.xml" rel="self"/>
  <updated>2013-03-27T00:00:00Z</updated>
  <author>
    <name>EmberJS.CN</name>
  </author>
  <entry>
    <title>Ember.js中英双语对照指南</title>
    <link rel="alternate" href="/blog/2013/03/27/changed-the-directories-of-guides.html"/>
    <id>/blog/2013/03/27/changed-the-directories-of-guides.html</id>
    <published>2013-03-27T00:00:00Z</published>
    <updated>2013-03-27T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;为了更好的为大家提供信息，我们对指南的目录结构进行了调整。原来的中英对照指南改为&lt;a href="http://emberjs.cn/guides"&gt;中文指南&lt;/a&gt;，并将原来的&lt;a href="http://emberjs.cn/bilingual_guides"&gt;中英双语对照指南&lt;/a&gt;独立开来。这样我们可以更加方便的保持中文指南与官方的指南同步。但这会影响到现在已经在进行的翻译工作，需要各位根据最新的目录结构进行调整，由此带来的不便，敬请原谅！&lt;/p&gt;

&lt;p&gt;经过调整后，我们提供了独立的中英双语对照指南，这也就成为了我们翻译工作新的工作目录（&lt;code&gt;source/bilingual_guides&lt;/code&gt;）。由于目录结构发生了改变，我们翻译工作的流程也随之需要进行一些调整。调整后的翻译步骤为：&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;为了更好的为大家提供信息，我们对指南的目录结构进行了调整。原来的中英对照指南改为&lt;a href="http://emberjs.cn/guides"&gt;中文指南&lt;/a&gt;，并将原来的&lt;a href="http://emberjs.cn/bilingual_guides"&gt;中英双语对照指南&lt;/a&gt;独立开来。这样我们可以更加方便的保持中文指南与官方的指南同步。但这会影响到现在已经在进行的翻译工作，需要各位根据最新的目录结构进行调整，由此带来的不便，敬请原谅！&lt;/p&gt;

&lt;p&gt;经过调整后，我们提供了独立的中英双语对照指南，这也就成为了我们翻译工作新的工作目录（&lt;code&gt;source/bilingual_guides&lt;/code&gt;）。由于目录结构发生了改变，我们翻译工作的流程也随之需要进行一些调整。调整后的翻译步骤为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;source/bilingual_guides&lt;/code&gt;翻译对应的指南；&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;source/guides&lt;/code&gt;中创建对应的中文指南；&lt;/li&gt;
&lt;li&gt;将翻译的指南提交；&lt;/li&gt;
&lt;li&gt;在收到PR后，我们会在二至三个工作日内，完成校对（您可能需要参考我们的意见进行适当的修改）；&lt;/li&gt;
&lt;li&gt;完成修正后，合并PR。&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Ember.js准备发布RC2了</title>
    <link rel="alternate" href="/blog/2013/03/11/ember-js-1-0-rc2.html"/>
    <id>/blog/2013/03/11/ember-js-1-0-rc2.html</id>
    <published>2013-03-11T00:00:00Z</published>
    <updated>2013-03-11T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;大新闻，&lt;code&gt;Ember.js&lt;/code&gt;团队已经开始了发布RC2的相关工作。&lt;/p&gt;

&lt;p&gt;今天看到@wycats在&lt;a href="https://github.com/emberjs/website"&gt;website&lt;/a&gt;上创建了一个rc2-release的分支，并且在一篇即将发布的文章中说已经开始了&lt;code&gt;Ember.js&lt;/code&gt; RC2发布的的相关工作。这说明了什么呢？这说明了我们离1.0正式版的发布又近了一步。这实在是一个不得不让人为之兴奋的消息。&lt;/p&gt;

&lt;p&gt;如RC1发布时所声明的一样，之后发布的版本只会做一些问题修正和增强性改变，不会进行破坏性变更。那么我们看看RC2会给我们带来些什么呢？&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;大新闻，&lt;code&gt;Ember.js&lt;/code&gt;团队已经开始了发布RC2的相关工作。&lt;/p&gt;

&lt;p&gt;今天看到@wycats在&lt;a href="https://github.com/emberjs/website"&gt;website&lt;/a&gt;上创建了一个rc2-release的分支，并且在一篇即将发布的文章中说已经开始了&lt;code&gt;Ember.js&lt;/code&gt; RC2发布的的相关工作。这说明了什么呢？这说明了我们离1.0正式版的发布又近了一步。这实在是一个不得不让人为之兴奋的消息。&lt;/p&gt;

&lt;p&gt;如RC1发布时所声明的一样，之后发布的版本只会做一些问题修正和增强性改变，不会进行破坏性变更。那么我们看看RC2会给我们带来些什么呢？&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;按命名空间查找控制器&lt;/h3&gt;
&lt;p&gt;在之前的版本中，我们只能从应用的主命名空间来查找控制器。在RC2中，我们可以从其他的命名空间来查找了。&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;render&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;posts&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;意味着使用&lt;code&gt;App.PostsController&lt;/code&gt;来渲染&lt;code&gt;posts&lt;/code&gt;模板。现在我们还可以使用其他命名空间下的控制器来进行渲染。例如：&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;render&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;blog&lt;/span&gt;&lt;span class="error"&gt;/&lt;/span&gt;&lt;span class="attribute-name"&gt;posts&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;这里会使用&lt;code&gt;Blog.PostsController&lt;/code&gt;来渲染&lt;code&gt;blog/posts&lt;/code&gt;模板。&lt;/p&gt;
&lt;h3 class='anchorable-toc' id='toc_'&gt;用多模型进行渲染&lt;/h3&gt;
&lt;p&gt;在RC1中，使用&lt;code&gt;{{render &amp;#39;posts&amp;#39;}}&lt;/code&gt;表示利用&lt;code&gt;App.PostsController&lt;/code&gt;的实例来渲染&lt;code&gt;posts&lt;/code&gt;模板。这种方法总是使用同一个单例的控制器来渲染模板。&lt;/p&gt;

&lt;p&gt;而在RC2中，可以使用一个特定的模型来渲染模板，例如&lt;code&gt;{{render &amp;#39;post&amp;#39; post}}&lt;/code&gt;。如果我们使用&lt;code&gt;render&lt;/code&gt;渲染模板的时候指定了一个模型，那么&lt;code&gt;Ember.js&lt;/code&gt;会每次创建一个新的&lt;code&gt;App.PostController&lt;/code&gt;实例，而不是使用同一个。这样我们就可以在循环中使用&lt;code&gt;{{render}}&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;post&lt;/span&gt; &lt;span class="attribute-name"&gt;in&lt;/span&gt; &lt;span class="attribute-name"&gt;posts&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;render&lt;/span&gt; &lt;span class="error"&gt;'&lt;/span&gt;&lt;span class="attribute-name"&gt;post&lt;/span&gt;&lt;span class="error"&gt;'&lt;/span&gt; &lt;span class="attribute-name"&gt;post&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;&lt;h3 class='anchorable-toc' id='toc_code-objectcontroller-code'&gt;打开&lt;code&gt;ObjectController&lt;/code&gt;的模型&lt;/h3&gt;
&lt;p&gt;将一个&lt;code&gt;ObjectController&lt;/code&gt;作为参数传递给&lt;code&gt;action&lt;/code&gt;和&lt;code&gt;linkTo&lt;/code&gt;时，&lt;code&gt;Ember.js&lt;/code&gt;现在支持将控制器的模型取出并传递给&lt;code&gt;action&lt;/code&gt;和&lt;code&gt;linkTo&lt;/code&gt;。最为重要的是，这使得我们可以在不影响控制器和路由的操作处理函数的同时，为&lt;code&gt;{{#each}}&lt;/code&gt;添加一个&lt;code&gt;itemController&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果我们有一个这样的模板：&lt;/p&gt;
&lt;div class="highlight handlebars "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span class="comment"&gt;&amp;lt;!-- posts.handlebars --&amp;gt;&lt;/span&gt;

&lt;span class="tag"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{#&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt; &lt;span class="attribute-name"&gt;controller&lt;/span&gt; &lt;span class="attribute-name"&gt;itemController&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;postItem&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
  &lt;span class="tag"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;action&lt;/span&gt; &lt;span class="attribute-name"&gt;selectPost&lt;/span&gt; &lt;span class="attribute-name"&gt;this&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt;&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{&lt;/span&gt;&lt;span class="attribute-name"&gt;name&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="inline"&gt;&lt;span class="inline-delimiter"&gt;{{/&lt;/span&gt;&lt;span class="attribute-name"&gt;each&lt;/span&gt;&lt;span class="inline-delimiter"&gt;}}&lt;/span&gt;&lt;/span&gt;
&lt;span class="tag"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;那么我们的&lt;code&gt;App.PostsController&lt;/code&gt;应该是这样的：&lt;/p&gt;
&lt;div class="highlight javascript "&gt;&lt;div class="ribbon"&gt;&lt;/div&gt;&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;App.PostsController = Ember.ArrayController.extend({
  &lt;span class="key"&gt;needs&lt;/span&gt;: &lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;currentPost&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;,

  &lt;span class="function"&gt;selectPost&lt;/span&gt;: &lt;span class="keyword"&gt;function&lt;/span&gt;(post) {
    &lt;span class="comment"&gt;// `post` here is an `App.Post`, not an&lt;/span&gt;
    &lt;span class="comment"&gt;// `App.PostItemController`&lt;/span&gt;
    &lt;span class="local-variable"&gt;this&lt;/span&gt;.set(&lt;span class="string"&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;span class="content"&gt;controllers.currentPost.model&lt;/span&gt;&lt;span class="delimiter"&gt;'&lt;/span&gt;&lt;/span&gt;, post);
  }
});
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;这使得使用&lt;code&gt;itemController&lt;/code&gt;减少了问题的出现。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Emberjs.cn域名正式启用</title>
    <link rel="alternate" href="/blog/2013/03/06/domain-name-emberjs-cn-enabled.html"/>
    <id>/blog/2013/03/06/domain-name-emberjs-cn-enabled.html</id>
    <published>2013-03-06T00:00:00Z</published>
    <updated>2013-03-06T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;经过20天的等待，今天终于收到工信部告知域名备案通过的信息，从现在开始&lt;a href="http://emberjs.cn"&gt;http://emberjs.cn&lt;/a&gt;域名正式启用。特在此处Mark一下，以纪念这一神圣的时刻。&lt;/p&gt;

&lt;p&gt;另外，最近翻译团队加入了一位给力的成员&lt;a href="https://github.com/TiffanyZhou"&gt;TiffanyZhou&lt;/a&gt;，提供了很多高质量的翻译作品。随着队伍的不断壮大，我们一定能打造出一个高质量、精品的&lt;code&gt;Ember.js&lt;/code&gt;中文社区。&lt;/p&gt;

&lt;p&gt;BTW，我们已经开始在实际的项目全面采用&lt;code&gt;Ember.js&lt;/code&gt;进行前端开发，在后续的日子里面，我们将会将我们在开发过程中遇到的问题，总结出来的经验拿出来，与大家一起分享。&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;经过20天的等待，今天终于收到工信部告知域名备案通过的信息，从现在开始&lt;a href="http://emberjs.cn"&gt;http://emberjs.cn&lt;/a&gt;域名正式启用。特在此处Mark一下，以纪念这一神圣的时刻。&lt;/p&gt;

&lt;p&gt;另外，最近翻译团队加入了一位给力的成员&lt;a href="https://github.com/TiffanyZhou"&gt;TiffanyZhou&lt;/a&gt;，提供了很多高质量的翻译作品。随着队伍的不断壮大，我们一定能打造出一个高质量、精品的&lt;code&gt;Ember.js&lt;/code&gt;中文社区。&lt;/p&gt;

&lt;p&gt;BTW，我们已经开始在实际的项目全面采用&lt;code&gt;Ember.js&lt;/code&gt;进行前端开发，在后续的日子里面，我们将会将我们在开发过程中遇到的问题，总结出来的经验拿出来，与大家一起分享。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>为什么Discourse选择Ember.JS</title>
    <link rel="alternate" href="/blog/2013/02/19/why-discourse-uses-ember.html"/>
    <id>/blog/2013/02/19/why-discourse-uses-ember.html</id>
    <published>2013-02-19T00:00:00Z</published>
    <updated>2013-02-19T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;Discourse的推出在整个社区赚足了眼球，由于Discourse选择使用Ember.JS作为前端MVC框架，这促使Ember.JS也成为了热议的话题。一年多以前SproutCore2正式改名为Ember.JS后，本人持续的关注了Ember.JS的开发过程，见证这Ember.JS的成长。Ember.JS的API在整个社区共同协作的基础上日趋稳定，Ember.JS 1.0.rc1的推出，更是标着其API已经成熟。我相信越来越多基于Ember.JS实现的优秀的应用，将会像雨后春笋般涌现出来。&lt;/p&gt;

&lt;p&gt;[Robin&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Discourse的推出在整个社区赚足了眼球，由于Discourse选择使用Ember.JS作为前端MVC框架，这促使Ember.JS也成为了热议的话题。一年多以前SproutCore2正式改名为Ember.JS后，本人持续的关注了Ember.JS的开发过程，见证这Ember.JS的成长。Ember.JS的API在整个社区共同协作的基础上日趋稳定，Ember.JS 1.0.rc1的推出，更是标着其API已经成熟。我相信越来越多基于Ember.JS实现的优秀的应用，将会像雨后春笋般涌现出来。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://eviltrout.com/"&gt;Robin
Ward&lt;/a&gt;（Discourse的发起者之一）在2013年2月10日撰写了一片博文&lt;a href="http://eviltrout.com/2013/02/10/why-discourse-uses-emberjs.html"&gt;Why Discourse Uses Ember.JS&lt;/a&gt;，从他个人的角度阐述了为什么Discourse选择Ember.JS作为前端MVC框架。一下为Robin Ward的几个核心观点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember.JS的文档简单易懂&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Robin Ward通过与&lt;a href="http://docs.angularjs.org/guide/directive"&gt;Angular.JS
Guides&lt;/a&gt;比较，Robin认为较Angular.JS而言，Ember.JS的文档简单易懂，对于初学者来说更是如此。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember.JS早期已经取得了令人瞩目的成绩，近期更是有了大幅的改进&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://meteor.com/"&gt;Meteor&lt;/a&gt;在推出的时候，同时给出了一个非常精彩的示例，但是它却缺少了一些非常重要的安全特性。但是就Ember.JS而言，在其最早期的时候（我想应该是指0.9.x），其提供的功能就已经相当的棒了。Robin感慨选择用Ember.JS来开发Discourse的正确性。另外，从Ember.JS的首次发布到现在，其API经过了非常大的调整，运行也变得越来越快。最新的API里面包括一个新的&lt;em&gt;路由（Router）&lt;/em&gt;接口，这从很大程度上进一步降低了让人讨厌的重复代码。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember.JS核心开发团队在开源社区有骄人的历史成绩&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yehuda Katz在Rails
3和Bundler完成了让人称口叫绝的工作（还有Merb、jQuery等），而且团队的其他成员也非常的优秀。Yehuda在与Robin的交谈时说他自己已经疯狂的迷恋上了Ember.JS，而Robin也深信这一点，因为Ember.JS实在是太优秀了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember.JS采用了字符串类型的模板&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ember.JS与Angular.JS不一同的一点是其采用了字符串类型的模板，而Angular.JS采用的是DOM类型的。这点完全是因为Robin的个人喜好，但是他也强调了如果要做一些服务器端的渲染，那么字符串类型的模板要比DOM类型的容易很多，因为不需要启动一个完整的PhantomJS的环境。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ember.JS的运行循环&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ember.JS的运行循环机制是其能得意获得高性能的一个基础，Ember.JS采用批量更新的方式来保持DOM的同步。相比其他很多框架采用循环逐一进行同步更新的机制来说要快了许多。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>EmberJS.CN之诞生</title>
    <link rel="alternate" href="/blog/2013/02/18/come-into-being.html"/>
    <id>/blog/2013/02/18/come-into-being.html</id>
    <published>2013-02-18T00:00:00Z</published>
    <updated>2013-02-18T00:00:00Z</updated>
    <author>
      <name>EmberJS.CN</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href="http://emberjs.com"&gt;Ember JS&lt;/a&gt; RC
1在2013-02-15发布了。关注和使用EmberJS已经一年有余了，鉴于其API一直没有稳定，所以一直没有在正式的项目中采用。根据 &lt;a href="http://emberjs.com/blog/2013/01/18/this-week-in-ember-js-4/"&gt;http://emberjs.com/blog/2013/01/18/this-week-in-ember-js-4/&lt;/a&gt; 中的描述：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we release the first RC, we will no longer make changes that&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
    <content type="html">&lt;p&gt;&lt;a href="http://emberjs.com"&gt;Ember JS&lt;/a&gt; RC
1在2013-02-15发布了。关注和使用EmberJS已经一年有余了，鉴于其API一直没有稳定，所以一直没有在正式的项目中采用。根据 &lt;a href="http://emberjs.com/blog/2013/01/18/this-week-in-ember-js-4/"&gt;http://emberjs.com/blog/2013/01/18/this-week-in-ember-js-4/&lt;/a&gt; 中的描述：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we release the first RC, we will no longer make changes that
affect any part of the documented API–again–unless such a change is
necessary to address a critical bug.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;RC 1的发布标志着Ember
JS到了一个重要的里程碑，API冻结了，也就是说已经是时候为EmberJS做点什么了。很早以前便注册了emberjs.cn（由于最开始的时候EmberJS定名为AmberJS，所以最开始的时候注册的是amberjs.cn，后来改名为EmberJS，马上就注册了这个域名），现在准备启用该域名，做一个资源分享与学习型网站。&lt;/p&gt;

&lt;p&gt;emberjs.cn的构建计划为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;翻译emberjs官方网站的Guides和API；&lt;/li&gt;
&lt;li&gt;收集、编写、提供emberjs相关的文章和资源；&lt;/li&gt;
&lt;li&gt;搭建emberjs中文交流社区。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注：emberjs.cn目前的界面完全基于 &lt;a href="https://github.com/emberjs/website"&gt;https://github.com/emberjs/website&lt;/a&gt;
来构建。&lt;/p&gt;
</content>
  </entry>
</feed>
